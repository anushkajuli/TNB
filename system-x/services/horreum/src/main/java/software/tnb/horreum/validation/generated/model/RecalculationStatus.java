/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * RecalculationStatus
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class RecalculationStatus {
    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    @javax.annotation.Nonnull
    private Long timestamp;

    public static final String SERIALIZED_NAME_TOTAL_RUNS = "totalRuns";
    @SerializedName(SERIALIZED_NAME_TOTAL_RUNS)
    @javax.annotation.Nonnull
    private Long totalRuns;

    public static final String SERIALIZED_NAME_FINISHED = "finished";
    @SerializedName(SERIALIZED_NAME_FINISHED)
    @javax.annotation.Nonnull
    private Long finished;

    public static final String SERIALIZED_NAME_DATASETS = "datasets";
    @SerializedName(SERIALIZED_NAME_DATASETS)
    @javax.annotation.Nonnull
    private Long datasets;

    public RecalculationStatus() {
    }

    public RecalculationStatus timestamp(@javax.annotation.Nonnull Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Recalculation timestamp
     *
     * @return timestamp
     */
    @javax.annotation.Nonnull
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(@javax.annotation.Nonnull Long timestamp) {
        this.timestamp = timestamp;
    }

    public RecalculationStatus totalRuns(@javax.annotation.Nonnull Long totalRuns) {
        this.totalRuns = totalRuns;
        return this;
    }

    /**
     * Total number of Runs being recalculated
     *
     * @return totalRuns
     */
    @javax.annotation.Nonnull
    public Long getTotalRuns() {
        return totalRuns;
    }

    public void setTotalRuns(@javax.annotation.Nonnull Long totalRuns) {
        this.totalRuns = totalRuns;
    }

    public RecalculationStatus finished(@javax.annotation.Nonnull Long finished) {
        this.finished = finished;
        return this;
    }

    /**
     * Total number of completed recalculations
     *
     * @return finished
     */
    @javax.annotation.Nonnull
    public Long getFinished() {
        return finished;
    }

    public void setFinished(@javax.annotation.Nonnull Long finished) {
        this.finished = finished;
    }

    public RecalculationStatus datasets(@javax.annotation.Nonnull Long datasets) {
        this.datasets = datasets;
        return this;
    }

    /**
     * Total number of generated datasets
     *
     * @return datasets
     */
    @javax.annotation.Nonnull
    public Long getDatasets() {
        return datasets;
    }

    public void setDatasets(@javax.annotation.Nonnull Long datasets) {
        this.datasets = datasets;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RecalculationStatus recalculationStatus = (RecalculationStatus) o;
        return Objects.equals(this.timestamp, recalculationStatus.timestamp) &&
            Objects.equals(this.totalRuns, recalculationStatus.totalRuns) &&
            Objects.equals(this.finished, recalculationStatus.finished) &&
            Objects.equals(this.datasets, recalculationStatus.datasets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(timestamp, totalRuns, finished, datasets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RecalculationStatus {\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    totalRuns: ").append(toIndentedString(totalRuns)).append("\n");
        sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
        sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("timestamp");
        openapiFields.add("totalRuns");
        openapiFields.add("finished");
        openapiFields.add("datasets");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("timestamp");
        openapiRequiredFields.add("totalRuns");
        openapiRequiredFields.add("finished");
        openapiRequiredFields.add("datasets");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RecalculationStatus
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RecalculationStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                    String.format("The required field(s) %s in RecalculationStatus is not found in the empty JSON string",
                        RecalculationStatus.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RecalculationStatus.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `RecalculationStatus` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : RecalculationStatus.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RecalculationStatus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RecalculationStatus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RecalculationStatus> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(RecalculationStatus.class));

            return (TypeAdapter<T>) new TypeAdapter<RecalculationStatus>() {
                @Override
                public void write(JsonWriter out, RecalculationStatus value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RecalculationStatus read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of RecalculationStatus given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RecalculationStatus
     * @throws IOException if the JSON string is invalid with respect to RecalculationStatus
     */
    public static RecalculationStatus fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RecalculationStatus.class);
    }

    /**
     * Convert an instance of RecalculationStatus to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

