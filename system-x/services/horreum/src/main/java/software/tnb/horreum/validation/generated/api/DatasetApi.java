/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.api;

import software.tnb.horreum.validation.generated.ApiCallback;
import software.tnb.horreum.validation.generated.ApiClient;
import software.tnb.horreum.validation.generated.ApiException;
import software.tnb.horreum.validation.generated.ApiResponse;
import software.tnb.horreum.validation.generated.Configuration;
import software.tnb.horreum.validation.generated.Pair;
import software.tnb.horreum.validation.generated.model.Dataset;
import software.tnb.horreum.validation.generated.model.DatasetList;
import software.tnb.horreum.validation.generated.model.DatasetSummary;
import software.tnb.horreum.validation.generated.model.Label;
import software.tnb.horreum.validation.generated.model.LabelPreview;
import software.tnb.horreum.validation.generated.model.LabelValue;
import software.tnb.horreum.validation.generated.model.SortDirection;

import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDataset
     *
     * @param id Dataset ID to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> No Dataset with the given id was found </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> JVM system properties of a particular host. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDatasetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDataset(Async)");
        }

        return getDatasetCall(id, _callback);
    }

    /**
     * Retrieve Dataset by ID
     *
     * @param id Dataset ID to retrieve (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> No Dataset with the given id was found </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> JVM system properties of a particular host. </td><td>  -  </td></tr>
     * </table>
     */
    public Dataset getDataset(Integer id) throws ApiException {
        ApiResponse<Dataset> localVarResp = getDatasetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve Dataset by ID
     *
     * @param id Dataset ID to retrieve (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> No Dataset with the given id was found </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> JVM system properties of a particular host. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Dataset> getDatasetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getDatasetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Dataset>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Retrieve Dataset by ID
     *
     * @param id Dataset ID to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> No Dataset with the given id was found </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> JVM system properties of a particular host. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDatasetAsync(Integer id, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Dataset>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSummary
     *
     * @param datasetId (required)
     * @param viewId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSummaryCall(Integer datasetId, Integer viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/{datasetId}/summary"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (viewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewId", viewId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryValidateBeforeCall(Integer datasetId, Integer viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getSummary(Async)");
        }

        return getSummaryCall(datasetId, viewId, _callback);
    }

    /**
     * @param datasetId (required)
     * @param viewId (optional)
     * @return DatasetSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public DatasetSummary getSummary(Integer datasetId, Integer viewId) throws ApiException {
        ApiResponse<DatasetSummary> localVarResp = getSummaryWithHttpInfo(datasetId, viewId);
        return localVarResp.getData();
    }

    /**
     * @param datasetId (required)
     * @param viewId (optional)
     * @return ApiResponse&lt;DatasetSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DatasetSummary> getSummaryWithHttpInfo(Integer datasetId, Integer viewId) throws ApiException {
        okhttp3.Call localVarCall = getSummaryValidateBeforeCall(datasetId, viewId, null);
        Type localVarReturnType = new TypeToken<DatasetSummary>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param datasetId (required)
     * @param viewId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSummaryAsync(Integer datasetId, Integer viewId, final ApiCallback<DatasetSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryValidateBeforeCall(datasetId, viewId, _callback);
        Type localVarReturnType = new TypeToken<DatasetSummary>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for labelValues
     *
     * @param datasetId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call labelValuesCall(Integer datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/{datasetId}/labelValues"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labelValuesValidateBeforeCall(Integer datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling labelValues(Async)");
        }

        return labelValuesCall(datasetId, _callback);
    }

    /**
     * @param datasetId (required)
     * @return List&lt;LabelValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<LabelValue> labelValues(Integer datasetId) throws ApiException {
        ApiResponse<List<LabelValue>> localVarResp = labelValuesWithHttpInfo(datasetId);
        return localVarResp.getData();
    }

    /**
     * @param datasetId (required)
     * @return ApiResponse&lt;List&lt;LabelValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<LabelValue>> labelValuesWithHttpInfo(Integer datasetId) throws ApiException {
        okhttp3.Call localVarCall = labelValuesValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<List<LabelValue>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param datasetId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call labelValuesAsync(Integer datasetId, final ApiCallback<List<LabelValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = labelValuesValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<List<LabelValue>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listBySchema
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional, default to start)
     * @param direction Sort direction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listBySchemaCall(String uri, Integer limit, Integer page, String sort, SortDirection direction, final ApiCallback _callback)
        throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/bySchema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBySchemaValidateBeforeCall(String uri, Integer limit, Integer page, String sort, SortDirection direction,
        final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling listBySchema(Async)");
        }

        return listBySchemaCall(uri, limit, page, sort, direction, _callback);
    }

    /**
     * Retrieve a paginated list of Datasets, with total count, by Schema
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional, default to start)
     * @param direction Sort direction (optional)
     * @return DatasetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public DatasetList listBySchema(String uri, Integer limit, Integer page, String sort, SortDirection direction) throws ApiException {
        ApiResponse<DatasetList> localVarResp = listBySchemaWithHttpInfo(uri, limit, page, sort, direction);
        return localVarResp.getData();
    }

    /**
     * Retrieve a paginated list of Datasets, with total count, by Schema
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional, default to start)
     * @param direction Sort direction (optional)
     * @return ApiResponse&lt;DatasetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DatasetList> listBySchemaWithHttpInfo(String uri, Integer limit, Integer page, String sort, SortDirection direction)
        throws ApiException {
        okhttp3.Call localVarCall = listBySchemaValidateBeforeCall(uri, limit, page, sort, direction, null);
        Type localVarReturnType = new TypeToken<DatasetList>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Retrieve a paginated list of Datasets, with total count, by Schema
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional, default to start)
     * @param direction Sort direction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listBySchemaAsync(String uri, Integer limit, Integer page, String sort, SortDirection direction,
        final ApiCallback<DatasetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBySchemaValidateBeforeCall(uri, limit, page, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<DatasetList>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listByTest
     *
     * @param testId Test ID of test to retrieve list of Datasets (required)
     * @param filter JOSN Filter expression to apply to query (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param viewId Optional View ID to filter datasets by view (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listByTestCall(Integer testId, String filter, Integer limit, Integer page, String sort, SortDirection direction,
        Integer viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataset/list/{testId}"
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (viewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewId", viewId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByTestValidateBeforeCall(Integer testId, String filter, Integer limit, Integer page, String sort,
        SortDirection direction, Integer viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling listByTest(Async)");
        }

        return listByTestCall(testId, filter, limit, page, sort, direction, viewId, _callback);
    }

    /**
     * Retrieve a paginated list of Datasets, with total count, by Test
     *
     * @param testId Test ID of test to retrieve list of Datasets (required)
     * @param filter JOSN Filter expression to apply to query (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param viewId Optional View ID to filter datasets by view (optional)
     * @return DatasetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public DatasetList listByTest(Integer testId, String filter, Integer limit, Integer page, String sort, SortDirection direction, Integer viewId)
        throws ApiException {
        ApiResponse<DatasetList> localVarResp = listByTestWithHttpInfo(testId, filter, limit, page, sort, direction, viewId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a paginated list of Datasets, with total count, by Test
     *
     * @param testId Test ID of test to retrieve list of Datasets (required)
     * @param filter JOSN Filter expression to apply to query (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param viewId Optional View ID to filter datasets by view (optional)
     * @return ApiResponse&lt;DatasetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DatasetList> listByTestWithHttpInfo(Integer testId, String filter, Integer limit, Integer page, String sort,
        SortDirection direction, Integer viewId) throws ApiException {
        okhttp3.Call localVarCall = listByTestValidateBeforeCall(testId, filter, limit, page, sort, direction, viewId, null);
        Type localVarReturnType = new TypeToken<DatasetList>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Retrieve a paginated list of Datasets, with total count, by Test
     *
     * @param testId Test ID of test to retrieve list of Datasets (required)
     * @param filter JOSN Filter expression to apply to query (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Schemas (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param viewId Optional View ID to filter datasets by view (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listByTestAsync(Integer testId, String filter, Integer limit, Integer page, String sort, SortDirection direction,
        Integer viewId, final ApiCallback<DatasetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByTestValidateBeforeCall(testId, filter, limit, page, sort, direction, viewId, _callback);
        Type localVarReturnType = new TypeToken<DatasetList>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for previewLabel
     *
     * @param datasetId (required)
     * @param label (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call previewLabelCall(Integer datasetId, Label label, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/api/dataset/{datasetId}/previewLabel"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewLabelValidateBeforeCall(Integer datasetId, Label label, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling previewLabel(Async)");
        }

        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling previewLabel(Async)");
        }

        return previewLabelCall(datasetId, label, _callback);
    }

    /**
     * @param datasetId (required)
     * @param label (required)
     * @return LabelPreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public LabelPreview previewLabel(Integer datasetId, Label label) throws ApiException {
        ApiResponse<LabelPreview> localVarResp = previewLabelWithHttpInfo(datasetId, label);
        return localVarResp.getData();
    }

    /**
     * @param datasetId (required)
     * @param label (required)
     * @return ApiResponse&lt;LabelPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<LabelPreview> previewLabelWithHttpInfo(Integer datasetId, Label label) throws ApiException {
        okhttp3.Call localVarCall = previewLabelValidateBeforeCall(datasetId, label, null);
        Type localVarReturnType = new TypeToken<LabelPreview>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param datasetId (required)
     * @param label (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call previewLabelAsync(Integer datasetId, Label label, final ApiCallback<LabelPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewLabelValidateBeforeCall(datasetId, label, _callback);
        Type localVarReturnType = new TypeToken<LabelPreview>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
