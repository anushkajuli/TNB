/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class ActionConfig extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ActionConfig.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ActionConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ActionConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GithubIssueCommentActionConfig> adapterGithubIssueCommentActionConfig =
                gson.getDelegateAdapter(this, TypeToken.get(GithubIssueCommentActionConfig.class));
            final TypeAdapter<GithubIssueCreateActionConfig> adapterGithubIssueCreateActionConfig =
                gson.getDelegateAdapter(this, TypeToken.get(GithubIssueCreateActionConfig.class));
            final TypeAdapter<HttpActionConfig> adapterHttpActionConfig = gson.getDelegateAdapter(this, TypeToken.get(HttpActionConfig.class));
            final TypeAdapter<SlackChannelMessageActionConfig> adapterSlackChannelMessageActionConfig =
                gson.getDelegateAdapter(this, TypeToken.get(SlackChannelMessageActionConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<ActionConfig>() {
                @Override
                public void write(JsonWriter out, ActionConfig value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GithubIssueCommentActionConfig`
                    if (value.getActualInstance() instanceof GithubIssueCommentActionConfig) {
                        JsonElement element =
                            adapterGithubIssueCommentActionConfig.toJsonTree((GithubIssueCommentActionConfig) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GithubIssueCreateActionConfig`
                    if (value.getActualInstance() instanceof GithubIssueCreateActionConfig) {
                        JsonElement element =
                            adapterGithubIssueCreateActionConfig.toJsonTree((GithubIssueCreateActionConfig) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HttpActionConfig`
                    if (value.getActualInstance() instanceof HttpActionConfig) {
                        JsonElement element = adapterHttpActionConfig.toJsonTree((HttpActionConfig) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackChannelMessageActionConfig`
                    if (value.getActualInstance() instanceof SlackChannelMessageActionConfig) {
                        JsonElement element =
                            adapterSlackChannelMessageActionConfig.toJsonTree((SlackChannelMessageActionConfig) value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException(
                        "Failed to serialize as the type doesn't match oneOf schemas: GithubIssueCommentActionConfig, "
                            + "GithubIssueCreateActionConfig, HttpActionConfig, SlackChannelMessageActionConfig");
                }

                @Override
                public ActionConfig read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GithubIssueCommentActionConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GithubIssueCommentActionConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterGithubIssueCommentActionConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GithubIssueCommentActionConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GithubIssueCommentActionConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GithubIssueCommentActionConfig'", e);
                    }
                    // deserialize GithubIssueCreateActionConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GithubIssueCreateActionConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterGithubIssueCreateActionConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GithubIssueCreateActionConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GithubIssueCreateActionConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GithubIssueCreateActionConfig'", e);
                    }
                    // deserialize HttpActionConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HttpActionConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterHttpActionConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HttpActionConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HttpActionConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HttpActionConfig'", e);
                    }
                    // deserialize SlackChannelMessageActionConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackChannelMessageActionConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackChannelMessageActionConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackChannelMessageActionConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackChannelMessageActionConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackChannelMessageActionConfig'", e);
                    }

                    if (match == 1) {
                        ActionConfig ret = new ActionConfig();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format(
                        "Failed deserialization for ActionConfig: %d classes match result, expected 1. Detailed failure message for oneOf schemas: "
                            + "%s. JSON: %s",
                        match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ActionConfig() {
        super("oneOf", Boolean.FALSE);
    }

    public ActionConfig(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GithubIssueCommentActionConfig", GithubIssueCommentActionConfig.class);
        schemas.put("GithubIssueCreateActionConfig", GithubIssueCreateActionConfig.class);
        schemas.put("HttpActionConfig", HttpActionConfig.class);
        schemas.put("SlackChannelMessageActionConfig", SlackChannelMessageActionConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ActionConfig.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GithubIssueCommentActionConfig, GithubIssueCreateActionConfig, HttpActionConfig, SlackChannelMessageActionConfig
     * <p>
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GithubIssueCommentActionConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GithubIssueCreateActionConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HttpActionConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackChannelMessageActionConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
            "Invalid instance type. Must be GithubIssueCommentActionConfig, GithubIssueCreateActionConfig, HttpActionConfig, "
                + "SlackChannelMessageActionConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * GithubIssueCommentActionConfig, GithubIssueCreateActionConfig, HttpActionConfig, SlackChannelMessageActionConfig
     *
     * @return The actual instance (GithubIssueCommentActionConfig, GithubIssueCreateActionConfig, HttpActionConfig, SlackChannelMessageActionConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GithubIssueCommentActionConfig`. If the actual instance is not `GithubIssueCommentActionConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GithubIssueCommentActionConfig`
     * @throws ClassCastException if the instance is not `GithubIssueCommentActionConfig`
     */
    public GithubIssueCommentActionConfig getGithubIssueCommentActionConfig() throws ClassCastException {
        return (GithubIssueCommentActionConfig) super.getActualInstance();
    }

    /**
     * Get the actual instance of `GithubIssueCreateActionConfig`. If the actual instance is not `GithubIssueCreateActionConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GithubIssueCreateActionConfig`
     * @throws ClassCastException if the instance is not `GithubIssueCreateActionConfig`
     */
    public GithubIssueCreateActionConfig getGithubIssueCreateActionConfig() throws ClassCastException {
        return (GithubIssueCreateActionConfig) super.getActualInstance();
    }

    /**
     * Get the actual instance of `HttpActionConfig`. If the actual instance is not `HttpActionConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HttpActionConfig`
     * @throws ClassCastException if the instance is not `HttpActionConfig`
     */
    public HttpActionConfig getHttpActionConfig() throws ClassCastException {
        return (HttpActionConfig) super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackChannelMessageActionConfig`. If the actual instance is not `SlackChannelMessageActionConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackChannelMessageActionConfig`
     * @throws ClassCastException if the instance is not `SlackChannelMessageActionConfig`
     */
    public SlackChannelMessageActionConfig getSlackChannelMessageActionConfig() throws ClassCastException {
        return (SlackChannelMessageActionConfig) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ActionConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with GithubIssueCommentActionConfig
        try {
            GithubIssueCommentActionConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GithubIssueCommentActionConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GithubIssueCreateActionConfig
        try {
            GithubIssueCreateActionConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GithubIssueCreateActionConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HttpActionConfig
        try {
            HttpActionConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HttpActionConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackChannelMessageActionConfig
        try {
            SlackChannelMessageActionConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackChannelMessageActionConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format(
                "The JSON string is invalid for ActionConfig with oneOf schemas: GithubIssueCommentActionConfig, GithubIssueCreateActionConfig, "
                    + "HttpActionConfig, SlackChannelMessageActionConfig. %d class(es) match the result, expected 1. Detailed failure message for "
                    + "oneOf schemas: %s. JSON: %s",
                validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ActionConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ActionConfig
     * @throws IOException if the JSON string is invalid with respect to ActionConfig
     */
    public static ActionConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ActionConfig.class);
    }

    /**
     * Convert an instance of ActionConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

