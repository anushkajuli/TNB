/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.tnb.horreum.validation.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import software.tnb.horreum.validation.generated.JSON;

/**
 * LabelInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]", comments = "Generator version: 7.10.0")
public class LabelInfo {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  @javax.annotation.Nonnull
  private Boolean metrics;

  public static final String SERIALIZED_NAME_FILTERING = "filtering";
  @SerializedName(SERIALIZED_NAME_FILTERING)
  @javax.annotation.Nonnull
  private Boolean filtering;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  @javax.annotation.Nonnull
  private List<SchemaDescriptor> schemas = new ArrayList<>();

  public LabelInfo() {
  }

  public LabelInfo name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Label name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public LabelInfo metrics(@javax.annotation.Nonnull Boolean metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Is label a metrics label?
   * @return metrics
   */
  @javax.annotation.Nonnull
  public Boolean getMetrics() {
    return metrics;
  }

  public void setMetrics(@javax.annotation.Nonnull Boolean metrics) {
    this.metrics = metrics;
  }


  public LabelInfo filtering(@javax.annotation.Nonnull Boolean filtering) {
    this.filtering = filtering;
    return this;
  }

  /**
   * Is label a filtering label?
   * @return filtering
   */
  @javax.annotation.Nonnull
  public Boolean getFiltering() {
    return filtering;
  }

  public void setFiltering(@javax.annotation.Nonnull Boolean filtering) {
    this.filtering = filtering;
  }


  public LabelInfo schemas(@javax.annotation.Nonnull List<SchemaDescriptor> schemas) {
    this.schemas = schemas;
    return this;
  }

  public LabelInfo addSchemasItem(SchemaDescriptor schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

  /**
   * List of schemas where label is referenced
   * @return schemas
   */
  @javax.annotation.Nonnull
  public List<SchemaDescriptor> getSchemas() {
    return schemas;
  }

  public void setSchemas(@javax.annotation.Nonnull List<SchemaDescriptor> schemas) {
    this.schemas = schemas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabelInfo labelInfo = (LabelInfo) o;
    return Objects.equals(this.name, labelInfo.name) &&
        Objects.equals(this.metrics, labelInfo.metrics) &&
        Objects.equals(this.filtering, labelInfo.filtering) &&
        Objects.equals(this.schemas, labelInfo.schemas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, metrics, filtering, schemas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabelInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    filtering: ").append(toIndentedString(filtering)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("metrics");
    openapiFields.add("filtering");
    openapiFields.add("schemas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("metrics");
    openapiRequiredFields.add("filtering");
    openapiRequiredFields.add("schemas");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabelInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabelInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabelInfo is not found in the empty JSON string", LabelInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabelInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabelInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LabelInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }

      JsonArray jsonArrayschemas = jsonObj.getAsJsonArray("schemas");
      // validate the required field `schemas` (array)
      for (int i = 0; i < jsonArrayschemas.size(); i++) {
        SchemaDescriptor.validateJsonElement(jsonArrayschemas.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabelInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabelInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabelInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabelInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LabelInfo>() {
           @Override
           public void write(JsonWriter out, LabelInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabelInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabelInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabelInfo
   * @throws IOException if the JSON string is invalid with respect to LabelInfo
   */
  public static LabelInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabelInfo.class);
  }

  /**
   * Convert an instance of LabelInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

