/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * GithubIssueCommentActionConfig
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class GithubIssueCommentActionConfig {
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    @javax.annotation.Nonnull
    private String type;

    public static final String SERIALIZED_NAME_ISSUE_URL = "issueUrl";
    @SerializedName(SERIALIZED_NAME_ISSUE_URL)
    @javax.annotation.Nonnull
    private String issueUrl;

    public static final String SERIALIZED_NAME_OWNER = "owner";
    @SerializedName(SERIALIZED_NAME_OWNER)
    @javax.annotation.Nonnull
    private String owner;

    public static final String SERIALIZED_NAME_REPO = "repo";
    @SerializedName(SERIALIZED_NAME_REPO)
    @javax.annotation.Nonnull
    private String repo;

    public static final String SERIALIZED_NAME_ISSUE = "issue";
    @SerializedName(SERIALIZED_NAME_ISSUE)
    @javax.annotation.Nonnull
    private String issue;

    public static final String SERIALIZED_NAME_FORMATTER = "formatter";
    @SerializedName(SERIALIZED_NAME_FORMATTER)
    @javax.annotation.Nonnull
    private String formatter;

    public GithubIssueCommentActionConfig() {
    }

    public GithubIssueCommentActionConfig type(@javax.annotation.Nonnull String type) {
        this.type = type;
        return this;
    }

    /**
     * Action type
     *
     * @return type
     */
    @javax.annotation.Nonnull
    public String getType() {
        return type;
    }

    public void setType(@javax.annotation.Nonnull String type) {
        this.type = type;
    }

    public GithubIssueCommentActionConfig issueUrl(@javax.annotation.Nonnull String issueUrl) {
        this.issueUrl = issueUrl;
        return this;
    }

    /**
     * GitHub issue URL
     *
     * @return issueUrl
     */
    @javax.annotation.Nonnull
    public String getIssueUrl() {
        return issueUrl;
    }

    public void setIssueUrl(@javax.annotation.Nonnull String issueUrl) {
        this.issueUrl = issueUrl;
    }

    public GithubIssueCommentActionConfig owner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * GitHub repo owner
     *
     * @return owner
     */
    @javax.annotation.Nonnull
    public String getOwner() {
        return owner;
    }

    public void setOwner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
    }

    public GithubIssueCommentActionConfig repo(@javax.annotation.Nonnull String repo) {
        this.repo = repo;
        return this;
    }

    /**
     * GitHub repo name
     *
     * @return repo
     */
    @javax.annotation.Nonnull
    public String getRepo() {
        return repo;
    }

    public void setRepo(@javax.annotation.Nonnull String repo) {
        this.repo = repo;
    }

    public GithubIssueCommentActionConfig issue(@javax.annotation.Nonnull String issue) {
        this.issue = issue;
        return this;
    }

    /**
     * GitHub issue number
     *
     * @return issue
     */
    @javax.annotation.Nonnull
    public String getIssue() {
        return issue;
    }

    public void setIssue(@javax.annotation.Nonnull String issue) {
        this.issue = issue;
    }

    public GithubIssueCommentActionConfig formatter(@javax.annotation.Nonnull String formatter) {
        this.formatter = formatter;
        return this;
    }

    /**
     * Object markdown formatter
     *
     * @return formatter
     */
    @javax.annotation.Nonnull
    public String getFormatter() {
        return formatter;
    }

    public void setFormatter(@javax.annotation.Nonnull String formatter) {
        this.formatter = formatter;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubIssueCommentActionConfig githubIssueCommentActionConfig = (GithubIssueCommentActionConfig) o;
        return Objects.equals(this.type, githubIssueCommentActionConfig.type) &&
            Objects.equals(this.issueUrl, githubIssueCommentActionConfig.issueUrl) &&
            Objects.equals(this.owner, githubIssueCommentActionConfig.owner) &&
            Objects.equals(this.repo, githubIssueCommentActionConfig.repo) &&
            Objects.equals(this.issue, githubIssueCommentActionConfig.issue) &&
            Objects.equals(this.formatter, githubIssueCommentActionConfig.formatter);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, issueUrl, owner, repo, issue, formatter);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GithubIssueCommentActionConfig {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    issueUrl: ").append(toIndentedString(issueUrl)).append("\n");
        sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
        sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
        sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
        sb.append("    formatter: ").append(toIndentedString(formatter)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type");
        openapiFields.add("issueUrl");
        openapiFields.add("owner");
        openapiFields.add("repo");
        openapiFields.add("issue");
        openapiFields.add("formatter");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("type");
        openapiRequiredFields.add("issueUrl");
        openapiRequiredFields.add("owner");
        openapiRequiredFields.add("repo");
        openapiRequiredFields.add("issue");
        openapiRequiredFields.add("formatter");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GithubIssueCommentActionConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GithubIssueCommentActionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                    String.format("The required field(s) %s in GithubIssueCommentActionConfig is not found in the empty JSON string",
                        GithubIssueCommentActionConfig.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GithubIssueCommentActionConfig.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `GithubIssueCommentActionConfig` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : GithubIssueCommentActionConfig.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
        }
        if (!jsonObj.get("issueUrl").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `issueUrl` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("issueUrl").toString()));
        }
        if (!jsonObj.get("owner").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
        }
        if (!jsonObj.get("repo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo").toString()));
        }
        if (!jsonObj.get("issue").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `issue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue").toString()));
        }
        if (!jsonObj.get("formatter").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `formatter` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("formatter").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GithubIssueCommentActionConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GithubIssueCommentActionConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GithubIssueCommentActionConfig> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GithubIssueCommentActionConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<GithubIssueCommentActionConfig>() {
                @Override
                public void write(JsonWriter out, GithubIssueCommentActionConfig value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GithubIssueCommentActionConfig read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of GithubIssueCommentActionConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GithubIssueCommentActionConfig
     * @throws IOException if the JSON string is invalid with respect to GithubIssueCommentActionConfig
     */
    public static GithubIssueCommentActionConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GithubIssueCommentActionConfig.class);
    }

    /**
     * Convert an instance of GithubIssueCommentActionConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

