/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * A configuration object for Change detection models
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class ConditionConfig {
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nonnull
    private String name;

    public static final String SERIALIZED_NAME_TITLE = "title";
    @SerializedName(SERIALIZED_NAME_TITLE)
    @javax.annotation.Nonnull
    private String title;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nonnull
    private String description;

    public static final String SERIALIZED_NAME_UI = "ui";
    @SerializedName(SERIALIZED_NAME_UI)
    @javax.annotation.Nonnull
    private List<ConditionComponent> ui = new ArrayList<>();

    public static final String SERIALIZED_NAME_DEFAULTS = "defaults";
    @SerializedName(SERIALIZED_NAME_DEFAULTS)
    @javax.annotation.Nullable
    private Map<String, Object> defaults = new HashMap<>();

    public ConditionConfig() {
    }

    public ConditionConfig name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of Change detection model
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public ConditionConfig title(@javax.annotation.Nonnull String title) {
        this.title = title;
        return this;
    }

    /**
     * UI name for change detection model
     *
     * @return title
     */
    @javax.annotation.Nonnull
    public String getTitle() {
        return title;
    }

    public void setTitle(@javax.annotation.Nonnull String title) {
        this.title = title;
    }

    public ConditionConfig description(@javax.annotation.Nonnull String description) {
        this.description = description;
        return this;
    }

    /**
     * Change detection model description
     *
     * @return description
     */
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nonnull String description) {
        this.description = description;
    }

    public ConditionConfig ui(@javax.annotation.Nonnull List<ConditionComponent> ui) {
        this.ui = ui;
        return this;
    }

    public ConditionConfig addUiItem(ConditionComponent uiItem) {
        if (this.ui == null) {
            this.ui = new ArrayList<>();
        }
        this.ui.add(uiItem);
        return this;
    }

    /**
     * A list of UI components for dynamically building the UI components
     *
     * @return ui
     */
    @javax.annotation.Nonnull
    public List<ConditionComponent> getUi() {
        return ui;
    }

    public void setUi(@javax.annotation.Nonnull List<ConditionComponent> ui) {
        this.ui = ui;
    }

    public ConditionConfig defaults(@javax.annotation.Nullable Map<String, Object> defaults) {
        this.defaults = defaults;
        return this;
    }

    public ConditionConfig putDefaultsItem(String key, Object defaultsItem) {
        if (this.defaults == null) {
            this.defaults = new HashMap<>();
        }
        this.defaults.put(key, defaultsItem);
        return this;
    }

    /**
     * A dictionary of UI default configuration items for dynamically building the UI components
     *
     * @return defaults
     */
    @javax.annotation.Nullable
    public Map<String, Object> getDefaults() {
        return defaults;
    }

    public void setDefaults(@javax.annotation.Nullable Map<String, Object> defaults) {
        this.defaults = defaults;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConditionConfig conditionConfig = (ConditionConfig) o;
        return Objects.equals(this.name, conditionConfig.name) &&
            Objects.equals(this.title, conditionConfig.title) &&
            Objects.equals(this.description, conditionConfig.description) &&
            Objects.equals(this.ui, conditionConfig.ui) &&
            Objects.equals(this.defaults, conditionConfig.defaults);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, title, description, ui, defaults);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConditionConfig {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    ui: ").append(toIndentedString(ui)).append("\n");
        sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("title");
        openapiFields.add("description");
        openapiFields.add("ui");
        openapiFields.add("defaults");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("title");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("ui");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ConditionConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ConditionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in ConditionConfig is not found in the empty JSON string",
                    ConditionConfig.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ConditionConfig.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `ConditionConfig` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ConditionConfig.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("description").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("ui").isJsonArray()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `ui` to be an array in the JSON string but got `%s`", jsonObj.get("ui").toString()));
        }

        JsonArray jsonArrayui = jsonObj.getAsJsonArray("ui");
        // validate the required field `ui` (array)
        for (int i = 0; i < jsonArrayui.size(); i++) {
            ConditionComponent.validateJsonElement(jsonArrayui.get(i));
        }
        ;
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ConditionConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ConditionConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ConditionConfig> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(ConditionConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<ConditionConfig>() {
                @Override
                public void write(JsonWriter out, ConditionConfig value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public ConditionConfig read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of ConditionConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ConditionConfig
     * @throws IOException if the JSON string is invalid with respect to ConditionConfig
     */
    public static ConditionConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ConditionConfig.class);
    }

    /**
     * Convert an instance of ConditionConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

