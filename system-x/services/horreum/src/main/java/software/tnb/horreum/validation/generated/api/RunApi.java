/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.api;

import software.tnb.horreum.validation.generated.ApiCallback;
import software.tnb.horreum.validation.generated.ApiClient;
import software.tnb.horreum.validation.generated.ApiException;
import software.tnb.horreum.validation.generated.ApiResponse;
import software.tnb.horreum.validation.generated.Configuration;
import software.tnb.horreum.validation.generated.Pair;
import software.tnb.horreum.validation.generated.model.Access;
import software.tnb.horreum.validation.generated.model.ExportedLabelValues;
import software.tnb.horreum.validation.generated.model.Run;
import software.tnb.horreum.validation.generated.model.RunCount;
import software.tnb.horreum.validation.generated.model.RunExtended;
import software.tnb.horreum.validation.generated.model.RunSummary;
import software.tnb.horreum.validation.generated.model.RunsSummary;
import software.tnb.horreum.validation.generated.model.SortDirection;

import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RunApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RunApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for add
     *
     * @param run (required)
     * @param test test name of ID (optional)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addCall(Run run, String test, String owner, Access access, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = run;

        // create path and map variables
        String localVarPath = "/api/run/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (test != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test", test));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (access != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access", access));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(Run run, String test, String owner, Access access, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling add(Async)");
        }

        return addCall(run, test, owner, access, _callback);
    }

    /**
     * Upload a new Run
     *
     * @param run (required)
     * @param test test name of ID (optional)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public void add(Run run, String test, String owner, Access access) throws ApiException {
        addWithHttpInfo(run, test, owner, access);
    }

    /**
     * Upload a new Run
     *
     * @param run (required)
     * @param test test name of ID (optional)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> addWithHttpInfo(Run run, String test, String owner, Access access) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(run, test, owner, access, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * (asynchronously)
     * Upload a new Run
     *
     * @param run (required)
     * @param test test name of ID (optional)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addAsync(Run run, String test, String owner, Access access, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(run, test, owner, access, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * ISSUE with auto generated API classes
     * Customized method. There seems to be no way how to set authentication name.
     *
     * Build call for addRunFromData
     *
     * @param start start timestamp of run, or json path expression (required)
     * @param stop stop timestamp of run, or json path expression (required)
     * @param test test name of ID (required)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @param schema Schema URI (optional)
     * @param description Run description (optional)
     * @param body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> id of the newly generated run </td><td>  -  </td></tr>
     * <tr><td> 202 </td><td> The run data will be processed asynchronously </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> Data is valid but no run was created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Some fields are missing or invalid </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addRunFromDataCall(String start, String stop, String test, String owner, Access access, String schema, String description,
        String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/run/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (stop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stop", stop));
        }

        if (test != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test", test));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (access != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access", access));
        }

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema", schema));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        //The list of authentication names seems to be always empty. Some convenient way how to add auth names needs to be implemented.
        String[] localVarAuthNames = getApiClient().getAuthentications().keySet().toArray(new String[0]);
        //String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRunFromDataValidateBeforeCall(String start, String stop, String test, String owner, Access access, String schema,
        String description, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling addRunFromData(Async)");
        }

        // verify the required parameter 'stop' is set
        if (stop == null) {
            throw new ApiException("Missing the required parameter 'stop' when calling addRunFromData(Async)");
        }

        // verify the required parameter 'test' is set
        if (test == null) {
            throw new ApiException("Missing the required parameter 'test' when calling addRunFromData(Async)");
        }

        return addRunFromDataCall(start, stop, test, owner, access, schema, description, body, _callback);
    }

    /**
     * Upload a new Run
     *
     * @param start start timestamp of run, or json path expression (required)
     * @param stop stop timestamp of run, or json path expression (required)
     * @param test test name of ID (required)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @param schema Schema URI (optional)
     * @param description Run description (optional)
     * @param body (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> id of the newly generated run </td><td>  -  </td></tr>
     * <tr><td> 202 </td><td> The run data will be processed asynchronously </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> Data is valid but no run was created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Some fields are missing or invalid </td><td>  -  </td></tr>
     * </table>
     */
    public Integer addRunFromData(String start, String stop, String test, String owner, Access access, String schema, String description, String body)
        throws ApiException {
        ApiResponse<Integer> localVarResp = addRunFromDataWithHttpInfo(start, stop, test, owner, access, schema, description, body);
        return localVarResp.getData();
    }

    /**
     * Upload a new Run
     *
     * @param start start timestamp of run, or json path expression (required)
     * @param stop stop timestamp of run, or json path expression (required)
     * @param test test name of ID (required)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @param schema Schema URI (optional)
     * @param description Run description (optional)
     * @param body (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> id of the newly generated run </td><td>  -  </td></tr>
     * <tr><td> 202 </td><td> The run data will be processed asynchronously </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> Data is valid but no run was created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Some fields are missing or invalid </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Integer> addRunFromDataWithHttpInfo(String start, String stop, String test, String owner, Access access, String schema,
        String description, String body) throws ApiException {
        okhttp3.Call localVarCall = addRunFromDataValidateBeforeCall(start, stop, test, owner, access, schema, description, body, null);
        Type localVarReturnType = new TypeToken<Integer>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Upload a new Run
     *
     * @param start start timestamp of run, or json path expression (required)
     * @param stop stop timestamp of run, or json path expression (required)
     * @param test test name of ID (required)
     * @param owner Name of the new owner (optional)
     * @param access New Access level (optional)
     * @param schema Schema URI (optional)
     * @param description Run description (optional)
     * @param body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> id of the newly generated run </td><td>  -  </td></tr>
     * <tr><td> 202 </td><td> The run data will be processed asynchronously </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> Data is valid but no run was created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Some fields are missing or invalid </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addRunFromDataAsync(String start, String stop, String test, String owner, Access access, String schema, String description,
        String body, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRunFromDataValidateBeforeCall(start, stop, test, owner, access, schema, description, body, _callback);
        Type localVarReturnType = new TypeToken<Integer>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for autocomplete
     *
     * @param query JSONPath to be autocompleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call autocompleteCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling autocomplete(Async)");
        }

        return autocompleteCall(query, _callback);
    }

    /**
     * @param query JSONPath to be autocompleted (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<String> autocomplete(String query) throws ApiException {
        ApiResponse<List<String>> localVarResp = autocompleteWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * @param query JSONPath to be autocompleted (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<String>> autocompleteWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = autocompleteValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<String>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param query JSONPath to be autocompleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call autocompleteAsync(String query, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<String>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getData
     *
     * @param id Run ID (required)
     * @param schemaUri FIlter by Schmea URI (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDataCall(Integer id, String schemaUri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/data"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schemaUri", schemaUri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataValidateBeforeCall(Integer id, String schemaUri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getData(Async)");
        }

        return getDataCall(id, schemaUri, _callback);
    }

    /**
     * Get Run data by Run ID
     *
     * @param id Run ID (required)
     * @param schemaUri FIlter by Schmea URI (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public Object getData(Integer id, String schemaUri) throws ApiException {
        ApiResponse<Object> localVarResp = getDataWithHttpInfo(id, schemaUri);
        return localVarResp.getData();
    }

    /**
     * Get Run data by Run ID
     *
     * @param id Run ID (required)
     * @param schemaUri FIlter by Schmea URI (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Object> getDataWithHttpInfo(Integer id, String schemaUri) throws ApiException {
        okhttp3.Call localVarCall = getDataValidateBeforeCall(id, schemaUri, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Get Run data by Run ID
     *
     * @param id Run ID (required)
     * @param schemaUri FIlter by Schmea URI (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDataAsync(Integer id, String schemaUri, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataValidateBeforeCall(id, schemaUri, _callback);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMetadata
     *
     * @param id Run ID (required)
     * @param schemaUri Filter by Schmea URI (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMetadataCall(Integer id, String schemaUri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/metadata"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schemaUri", schemaUri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(Integer id, String schemaUri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMetadata(Async)");
        }

        return getMetadataCall(id, schemaUri, _callback);
    }

    /**
     * Get Run  meta data by Run ID
     *
     * @param id Run ID (required)
     * @param schemaUri Filter by Schmea URI (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public Object getMetadata(Integer id, String schemaUri) throws ApiException {
        ApiResponse<Object> localVarResp = getMetadataWithHttpInfo(id, schemaUri);
        return localVarResp.getData();
    }

    /**
     * Get Run  meta data by Run ID
     *
     * @param id Run ID (required)
     * @param schemaUri Filter by Schmea URI (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Object> getMetadataWithHttpInfo(Integer id, String schemaUri) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(id, schemaUri, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Get Run  meta data by Run ID
     *
     * @param id Run ID (required)
     * @param schemaUri Filter by Schmea URI (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Run payload </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMetadataAsync(Integer id, String schemaUri, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(id, schemaUri, _callback);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getRun
     *
     * @param id Run ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run data with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getRunCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRun(Async)");
        }

        return getRunCall(id, _callback);
    }

    /**
     * Get extended Run information by Run ID
     *
     * @param id Run ID (required)
     * @return RunExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run data with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public RunExtended getRun(Integer id) throws ApiException {
        ApiResponse<RunExtended> localVarResp = getRunWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get extended Run information by Run ID
     *
     * @param id Run ID (required)
     * @return ApiResponse&lt;RunExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run data with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RunExtended> getRunWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getRunValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RunExtended>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Get extended Run information by Run ID
     *
     * @param id Run ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run data with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getRunAsync(Integer id, final ApiCallback<RunExtended> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RunExtended>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getRunSummary
     *
     * @param id Run ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run summary with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getRunSummaryCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/summary"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunSummaryValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRunSummary(Async)");
        }

        return getRunSummaryCall(id, _callback);
    }

    /**
     * Get Run Summary information by Run ID
     *
     * @param id Run ID (required)
     * @return RunSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run summary with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public RunSummary getRunSummary(Integer id) throws ApiException {
        ApiResponse<RunSummary> localVarResp = getRunSummaryWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Run Summary information by Run ID
     *
     * @param id Run ID (required)
     * @return ApiResponse&lt;RunSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run summary with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RunSummary> getRunSummaryWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getRunSummaryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RunSummary>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Get Run Summary information by Run ID
     *
     * @param id Run ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> If no Run have been found with the given id </td><td>  -  </td></tr>
     * <tr><td> 200 </td><td> Run summary with the referenced schemas and generated datasets </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getRunSummaryAsync(Integer id, final ApiCallback<RunSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunSummaryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RunSummary>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for labelValues
     *
     * @param id Run Id (required)
     * @param filter either a required json sub-document or path expression (optional, default to {})
     * @param sort label name for sorting (optional, default to )
     * @param direction either Ascending or Descending (optional, default to Ascending)
     * @param limit the maximum number of results to include (optional, default to 2147483647)
     * @param page which page to skip to when using a limit (optional, default to 0)
     * @param include label name(s) to include in the result as scalar or comma separated (optional)
     * @param exclude label name(s) to exclude from the result as scalar or comma separated (optional)
     * @param multiFilter enable filtering for multiple values with an array of values (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> label Values </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call labelValuesCall(Integer id, String filter, String sort, String direction, Integer limit, Integer page, List<String> include,
        List<String> exclude, Boolean multiFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/labelValues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (multiFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("multiFilter", multiFilter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labelValuesValidateBeforeCall(Integer id, String filter, String sort, String direction, Integer limit, Integer page,
        List<String> include, List<String> exclude, Boolean multiFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling labelValues(Async)");
        }

        return labelValuesCall(id, filter, sort, direction, limit, page, include, exclude, multiFilter, _callback);
    }

    /**
     * Get all the label values for the run
     *
     * @param id Run Id (required)
     * @param filter either a required json sub-document or path expression (optional, default to {})
     * @param sort label name for sorting (optional, default to )
     * @param direction either Ascending or Descending (optional, default to Ascending)
     * @param limit the maximum number of results to include (optional, default to 2147483647)
     * @param page which page to skip to when using a limit (optional, default to 0)
     * @param include label name(s) to include in the result as scalar or comma separated (optional)
     * @param exclude label name(s) to exclude from the result as scalar or comma separated (optional)
     * @param multiFilter enable filtering for multiple values with an array of values (optional, default to false)
     * @return List&lt;ExportedLabelValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> label Values </td><td>  -  </td></tr>
     * </table>
     */
    public List<ExportedLabelValues> labelValues(Integer id, String filter, String sort, String direction, Integer limit, Integer page,
        List<String> include, List<String> exclude, Boolean multiFilter) throws ApiException {
        ApiResponse<List<ExportedLabelValues>> localVarResp =
            labelValuesWithHttpInfo(id, filter, sort, direction, limit, page, include, exclude, multiFilter);
        return localVarResp.getData();
    }

    /**
     * Get all the label values for the run
     *
     * @param id Run Id (required)
     * @param filter either a required json sub-document or path expression (optional, default to {})
     * @param sort label name for sorting (optional, default to )
     * @param direction either Ascending or Descending (optional, default to Ascending)
     * @param limit the maximum number of results to include (optional, default to 2147483647)
     * @param page which page to skip to when using a limit (optional, default to 0)
     * @param include label name(s) to include in the result as scalar or comma separated (optional)
     * @param exclude label name(s) to exclude from the result as scalar or comma separated (optional)
     * @param multiFilter enable filtering for multiple values with an array of values (optional, default to false)
     * @return ApiResponse&lt;List&lt;ExportedLabelValues&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> label Values </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<ExportedLabelValues>> labelValuesWithHttpInfo(Integer id, String filter, String sort, String direction, Integer limit,
        Integer page, List<String> include, List<String> exclude, Boolean multiFilter) throws ApiException {
        okhttp3.Call localVarCall = labelValuesValidateBeforeCall(id, filter, sort, direction, limit, page, include, exclude, multiFilter, null);
        Type localVarReturnType = new TypeToken<List<ExportedLabelValues>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Get all the label values for the run
     *
     * @param id Run Id (required)
     * @param filter either a required json sub-document or path expression (optional, default to {})
     * @param sort label name for sorting (optional, default to )
     * @param direction either Ascending or Descending (optional, default to Ascending)
     * @param limit the maximum number of results to include (optional, default to 2147483647)
     * @param page which page to skip to when using a limit (optional, default to 0)
     * @param include label name(s) to include in the result as scalar or comma separated (optional)
     * @param exclude label name(s) to exclude from the result as scalar or comma separated (optional)
     * @param multiFilter enable filtering for multiple values with an array of values (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> label Values </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call labelValuesAsync(Integer id, String filter, String sort, String direction, Integer limit, Integer page, List<String> include,
        List<String> exclude, Boolean multiFilter, final ApiCallback<List<ExportedLabelValues>> _callback) throws ApiException {

        okhttp3.Call localVarCall = labelValuesValidateBeforeCall(id, filter, sort, direction, limit, page, include, exclude, multiFilter, _callback);
        Type localVarReturnType = new TypeToken<List<ExportedLabelValues>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listAllRuns
     *
     * @param query query string to filter runs (optional)
     * @param matchAll match all Runs? (optional)
     * @param roles __my, __all or a comma delimited  list of roles (optional)
     * @param trashed show trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAllRunsCall(String query, Boolean matchAll, String roles, Boolean trashed, Integer limit, Integer page, String sort,
        SortDirection direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (matchAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchAll", matchAll));
        }

        if (roles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roles", roles));
        }

        if (trashed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trashed", trashed));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllRunsValidateBeforeCall(String query, Boolean matchAll, String roles, Boolean trashed, Integer limit, Integer page,
        String sort, SortDirection direction, final ApiCallback _callback) throws ApiException {
        return listAllRunsCall(query, matchAll, roles, trashed, limit, page, sort, direction, _callback);
    }

    /**
     * Retrieve a paginated list of Runs with available count
     *
     * @param query query string to filter runs (optional)
     * @param matchAll match all Runs? (optional)
     * @param roles __my, __all or a comma delimited  list of roles (optional)
     * @param trashed show trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @return RunsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public RunsSummary listAllRuns(String query, Boolean matchAll, String roles, Boolean trashed, Integer limit, Integer page, String sort,
        SortDirection direction) throws ApiException {
        ApiResponse<RunsSummary> localVarResp = listAllRunsWithHttpInfo(query, matchAll, roles, trashed, limit, page, sort, direction);
        return localVarResp.getData();
    }

    /**
     * Retrieve a paginated list of Runs with available count
     *
     * @param query query string to filter runs (optional)
     * @param matchAll match all Runs? (optional)
     * @param roles __my, __all or a comma delimited  list of roles (optional)
     * @param trashed show trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @return ApiResponse&lt;RunsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RunsSummary> listAllRunsWithHttpInfo(String query, Boolean matchAll, String roles, Boolean trashed, Integer limit,
        Integer page, String sort, SortDirection direction) throws ApiException {
        okhttp3.Call localVarCall = listAllRunsValidateBeforeCall(query, matchAll, roles, trashed, limit, page, sort, direction, null);
        Type localVarReturnType = new TypeToken<RunsSummary>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Retrieve a paginated list of Runs with available count
     *
     * @param query query string to filter runs (optional)
     * @param matchAll match all Runs? (optional)
     * @param roles __my, __all or a comma delimited  list of roles (optional)
     * @param trashed show trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAllRunsAsync(String query, Boolean matchAll, String roles, Boolean trashed, Integer limit, Integer page, String sort,
        SortDirection direction, final ApiCallback<RunsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllRunsValidateBeforeCall(query, matchAll, roles, trashed, limit, page, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<RunsSummary>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listBySchema
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listBySchemaCall(String uri, Integer limit, Integer page, String sort, SortDirection direction, final ApiCallback _callback)
        throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/bySchema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBySchemaValidateBeforeCall(String uri, Integer limit, Integer page, String sort, SortDirection direction,
        final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling listBySchema(Async)");
        }

        return listBySchemaCall(uri, limit, page, sort, direction, _callback);
    }

    /**
     * Retrieve a paginated list of Runs with available count for a given Schema URI
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @return RunsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public RunsSummary listBySchema(String uri, Integer limit, Integer page, String sort, SortDirection direction) throws ApiException {
        ApiResponse<RunsSummary> localVarResp = listBySchemaWithHttpInfo(uri, limit, page, sort, direction);
        return localVarResp.getData();
    }

    /**
     * Retrieve a paginated list of Runs with available count for a given Schema URI
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @return ApiResponse&lt;RunsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RunsSummary> listBySchemaWithHttpInfo(String uri, Integer limit, Integer page, String sort, SortDirection direction)
        throws ApiException {
        okhttp3.Call localVarCall = listBySchemaValidateBeforeCall(uri, limit, page, sort, direction, null);
        Type localVarReturnType = new TypeToken<RunsSummary>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Retrieve a paginated list of Runs with available count for a given Schema URI
     *
     * @param uri Schema URI (required)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listBySchemaAsync(String uri, Integer limit, Integer page, String sort, SortDirection direction,
        final ApiCallback<RunsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBySchemaValidateBeforeCall(uri, limit, page, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<RunsSummary>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listTestRuns
     *
     * @param testId Test ID (required)
     * @param trashed include trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listTestRunsCall(Integer testId, Boolean trashed, Integer limit, Integer page, String sort, SortDirection direction,
        final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/list/{testId}"
            .replace("{" + "testId" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trashed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trashed", trashed));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTestRunsValidateBeforeCall(Integer testId, Boolean trashed, Integer limit, Integer page, String sort,
        SortDirection direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling listTestRuns(Async)");
        }

        return listTestRunsCall(testId, trashed, limit, page, sort, direction, _callback);
    }

    /**
     * Retrieve a paginated list of Runs with available count for a given Test ID
     *
     * @param testId Test ID (required)
     * @param trashed include trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @return RunsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public RunsSummary listTestRuns(Integer testId, Boolean trashed, Integer limit, Integer page, String sort, SortDirection direction)
        throws ApiException {
        ApiResponse<RunsSummary> localVarResp = listTestRunsWithHttpInfo(testId, trashed, limit, page, sort, direction);
        return localVarResp.getData();
    }

    /**
     * Retrieve a paginated list of Runs with available count for a given Test ID
     *
     * @param testId Test ID (required)
     * @param trashed include trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @return ApiResponse&lt;RunsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RunsSummary> listTestRunsWithHttpInfo(Integer testId, Boolean trashed, Integer limit, Integer page, String sort,
        SortDirection direction) throws ApiException {
        okhttp3.Call localVarCall = listTestRunsValidateBeforeCall(testId, trashed, limit, page, sort, direction, null);
        Type localVarReturnType = new TypeToken<RunsSummary>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Retrieve a paginated list of Runs with available count for a given Test ID
     *
     * @param testId Test ID (required)
     * @param trashed include trashed runs (optional)
     * @param limit limit the number of results (optional)
     * @param page filter by page number of a paginated list of Tests (optional)
     * @param sort Field name to sort results (optional)
     * @param direction Sort direction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listTestRunsAsync(Integer testId, Boolean trashed, Integer limit, Integer page, String sort, SortDirection direction,
        final ApiCallback<RunsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTestRunsValidateBeforeCall(testId, trashed, limit, page, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<RunsSummary>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for recalculateAll
     *
     * @param from start timestamp (optional)
     * @param to end timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call recalculateAllCall(String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/recalculateAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recalculateAllValidateBeforeCall(String from, String to, final ApiCallback _callback) throws ApiException {
        return recalculateAllCall(from, to, _callback);
    }

    /**
     * Recalculate Datasets for Runs between two dates
     *
     * @param from start timestamp (optional)
     * @param to end timestamp (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public void recalculateAll(String from, String to) throws ApiException {
        recalculateAllWithHttpInfo(from, to);
    }

    /**
     * Recalculate Datasets for Runs between two dates
     *
     * @param from start timestamp (optional)
     * @param to end timestamp (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> recalculateAllWithHttpInfo(String from, String to) throws ApiException {
        okhttp3.Call localVarCall = recalculateAllValidateBeforeCall(from, to, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * (asynchronously)
     * Recalculate Datasets for Runs between two dates
     *
     * @param from start timestamp (optional)
     * @param to end timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call recalculateAllAsync(String from, String to, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recalculateAllValidateBeforeCall(from, to, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for recalculateDatasets
     *
     * @param id Run ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Array of generated Datasets </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call recalculateDatasetsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/recalculate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recalculateDatasetsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recalculateDatasets(Async)");
        }

        return recalculateDatasetsCall(id, _callback);
    }

    /**
     * Recalculate Datasets for Run
     *
     * @param id Run ID (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Array of generated Datasets </td><td>  -  </td></tr>
     * </table>
     */
    public List<Integer> recalculateDatasets(Integer id) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = recalculateDatasetsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recalculate Datasets for Run
     *
     * @param id Run ID (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Array of generated Datasets </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Integer>> recalculateDatasetsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = recalculateDatasetsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Integer>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Recalculate Datasets for Run
     *
     * @param id Run ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Array of generated Datasets </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call recalculateDatasetsAsync(Integer id, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recalculateDatasetsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for runCount
     *
     * @param testId Test ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call runCountCall(Integer testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testId", testId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runCountValidateBeforeCall(Integer testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling runCount(Async)");
        }

        return runCountCall(testId, _callback);
    }

    /**
     * Run count summary for given Test ID
     *
     * @param testId Test ID (required)
     * @return RunCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public RunCount runCount(Integer testId) throws ApiException {
        ApiResponse<RunCount> localVarResp = runCountWithHttpInfo(testId);
        return localVarResp.getData();
    }

    /**
     * Run count summary for given Test ID
     *
     * @param testId Test ID (required)
     * @return ApiResponse&lt;RunCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RunCount> runCountWithHttpInfo(Integer testId) throws ApiException {
        okhttp3.Call localVarCall = runCountValidateBeforeCall(testId, null);
        Type localVarReturnType = new TypeToken<RunCount>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Run count summary for given Test ID
     *
     * @param testId Test ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call runCountAsync(Integer testId, final ApiCallback<RunCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = runCountValidateBeforeCall(testId, _callback);
        Type localVarReturnType = new TypeToken<RunCount>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for trash
     *
     * @param id Run ID (required)
     * @param isTrashed should run be trashed? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call trashCall(Integer id, Boolean isTrashed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/trash"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isTrashed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isTrashed", isTrashed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trashValidateBeforeCall(Integer id, Boolean isTrashed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trash(Async)");
        }

        return trashCall(id, isTrashed, _callback);
    }

    /**
     * Trash a Run with a given ID
     *
     * @param id Run ID (required)
     * @param isTrashed should run be trashed? (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public void trash(Integer id, Boolean isTrashed) throws ApiException {
        trashWithHttpInfo(id, isTrashed);
    }

    /**
     * Trash a Run with a given ID
     *
     * @param id Run ID (required)
     * @param isTrashed should run be trashed? (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> trashWithHttpInfo(Integer id, Boolean isTrashed) throws ApiException {
        okhttp3.Call localVarCall = trashValidateBeforeCall(id, isTrashed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * (asynchronously)
     * Trash a Run with a given ID
     *
     * @param id Run ID (required)
     * @param isTrashed should run be trashed? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call trashAsync(Integer id, Boolean isTrashed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trashValidateBeforeCall(id, isTrashed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateAccess
     *
     * @param id Run ID to update Access (required)
     * @param owner Name of the new owner (required)
     * @param access New Access level (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAccessCall(Integer id, String owner, Access access, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/run/{id}/updateAccess"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (access != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access", access));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessValidateBeforeCall(Integer id, String owner, Access access, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAccess(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateAccess(Async)");
        }

        // verify the required parameter 'access' is set
        if (access == null) {
            throw new ApiException("Missing the required parameter 'access' when calling updateAccess(Async)");
        }

        return updateAccessCall(id, owner, access, _callback);
    }

    /**
     * Update the Access configuration for a Run
     *
     * @param id Run ID to update Access (required)
     * @param owner Name of the new owner (required)
     * @param access New Access level (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public void updateAccess(Integer id, String owner, Access access) throws ApiException {
        updateAccessWithHttpInfo(id, owner, access);
    }

    /**
     * Update the Access configuration for a Run
     *
     * @param id Run ID to update Access (required)
     * @param owner Name of the new owner (required)
     * @param access New Access level (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> updateAccessWithHttpInfo(Integer id, String owner, Access access) throws ApiException {
        okhttp3.Call localVarCall = updateAccessValidateBeforeCall(id, owner, access, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * (asynchronously)
     * Update the Access configuration for a Run
     *
     * @param id Run ID to update Access (required)
     * @param owner Name of the new owner (required)
     * @param access New Access level (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAccessAsync(Integer id, String owner, Access access, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessValidateBeforeCall(id, owner, access, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateDescription
     *
     * @param id Run ID (required)
     * @param body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDescriptionCall(Integer id, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/run/{id}/description"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDescriptionValidateBeforeCall(Integer id, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDescription(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDescription(Async)");
        }

        return updateDescriptionCall(id, body, _callback);
    }

    /**
     * Update Run description
     *
     * @param id Run ID (required)
     * @param body (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public void updateDescription(Integer id, String body) throws ApiException {
        updateDescriptionWithHttpInfo(id, body);
    }

    /**
     * Update Run description
     *
     * @param id Run ID (required)
     * @param body (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> updateDescriptionWithHttpInfo(Integer id, String body) throws ApiException {
        okhttp3.Call localVarCall = updateDescriptionValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * (asynchronously)
     * Update Run description
     *
     * @param id Run ID (required)
     * @param body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDescriptionAsync(Integer id, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDescriptionValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateSchema
     *
     * @param id Run ID (required)
     * @param path JSON path expression to update schema (optional)
     * @param body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSchemaCall(Integer id, String path, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/run/{id}/schema"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
            localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemaValidateBeforeCall(Integer id, String path, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSchema(Async)");
        }

        return updateSchemaCall(id, path, body, _callback);
    }

    /**
     * Update Run schema for part of JSON data
     *
     * @param id Run ID (required)
     * @param path JSON path expression to update schema (optional)
     * @param body (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public Map<String, String> updateSchema(Integer id, String path, String body) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = updateSchemaWithHttpInfo(id, path, body);
        return localVarResp.getData();
    }

    /**
     * Update Run schema for part of JSON data
     *
     * @param id Run ID (required)
     * @param path JSON path expression to update schema (optional)
     * @param body (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Map<String, String>> updateSchemaWithHttpInfo(Integer id, String path, String body) throws ApiException {
        okhttp3.Call localVarCall = updateSchemaValidateBeforeCall(id, path, body, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Update Run schema for part of JSON data
     *
     * @param id Run ID (required)
     * @param path JSON path expression to update schema (optional)
     * @param body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSchemaAsync(Integer id, String path, String body, final ApiCallback<Map<String, String>> _callback)
        throws ApiException {

        okhttp3.Call localVarCall = updateSchemaValidateBeforeCall(id, path, body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
