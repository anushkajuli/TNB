/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * TestSummary
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class TestSummary {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    @javax.annotation.Nonnull
    private Integer id;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nonnull
    private String name;

    public static final String SERIALIZED_NAME_FOLDER = "folder";
    @SerializedName(SERIALIZED_NAME_FOLDER)
    @javax.annotation.Nullable
    private String folder;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_DATASETS = "datasets";
    @SerializedName(SERIALIZED_NAME_DATASETS)
    @javax.annotation.Nullable
    private BigDecimal datasets;

    public static final String SERIALIZED_NAME_RUNS = "runs";
    @SerializedName(SERIALIZED_NAME_RUNS)
    @javax.annotation.Nullable
    private BigDecimal runs;

    public static final String SERIALIZED_NAME_WATCHING = "watching";
    @SerializedName(SERIALIZED_NAME_WATCHING)
    @javax.annotation.Nullable
    private Set<String> watching = new LinkedHashSet<>();

    public static final String SERIALIZED_NAME_DATASTORE_ID = "datastoreId";
    @SerializedName(SERIALIZED_NAME_DATASTORE_ID)
    @javax.annotation.Nonnull
    private Integer datastoreId;

    public static final String SERIALIZED_NAME_ACCESS = "access";
    @SerializedName(SERIALIZED_NAME_ACCESS)
    @javax.annotation.Nonnull
    private Access access;

    public static final String SERIALIZED_NAME_OWNER = "owner";
    @SerializedName(SERIALIZED_NAME_OWNER)
    @javax.annotation.Nonnull
    private String owner;

    public TestSummary() {
    }

    public TestSummary id(@javax.annotation.Nonnull Integer id) {
        this.id = id;
        return this;
    }

    /**
     * ID of tests
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public Integer getId() {
        return id;
    }

    public void setId(@javax.annotation.Nonnull Integer id) {
        this.id = id;
    }

    public TestSummary name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Test name
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public TestSummary folder(@javax.annotation.Nullable String folder) {
        this.folder = folder;
        return this;
    }

    /**
     * Name of folder that the test is stored in. Folders allow tests to be organised in the UI
     *
     * @return folder
     */
    @javax.annotation.Nullable
    public String getFolder() {
        return folder;
    }

    public void setFolder(@javax.annotation.Nullable String folder) {
        this.folder = folder;
    }

    public TestSummary description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Description of the test
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }

    public TestSummary datasets(@javax.annotation.Nullable BigDecimal datasets) {
        this.datasets = datasets;
        return this;
    }

    /**
     * Total number of Datasets for the Test
     *
     * @return datasets
     */
    @javax.annotation.Nullable
    public BigDecimal getDatasets() {
        return datasets;
    }

    public void setDatasets(@javax.annotation.Nullable BigDecimal datasets) {
        this.datasets = datasets;
    }

    public TestSummary runs(@javax.annotation.Nullable BigDecimal runs) {
        this.runs = runs;
        return this;
    }

    /**
     * Total number of Runs for the Test
     *
     * @return runs
     */
    @javax.annotation.Nullable
    public BigDecimal getRuns() {
        return runs;
    }

    public void setRuns(@javax.annotation.Nullable BigDecimal runs) {
        this.runs = runs;
    }

    public TestSummary watching(@javax.annotation.Nullable Set<String> watching) {
        this.watching = watching;
        return this;
    }

    public TestSummary addWatchingItem(String watchingItem) {
        if (this.watching == null) {
            this.watching = new LinkedHashSet<>();
        }
        this.watching.add(watchingItem);
        return this;
    }

    /**
     * Subscriptions for each test for authenticated user
     *
     * @return watching
     */
    @javax.annotation.Nullable
    public Set<String> getWatching() {
        return watching;
    }

    public void setWatching(@javax.annotation.Nullable Set<String> watching) {
        this.watching = watching;
    }

    public TestSummary datastoreId(@javax.annotation.Nonnull Integer datastoreId) {
        this.datastoreId = datastoreId;
        return this;
    }

    /**
     * Datastore id
     *
     * @return datastoreId
     */
    @javax.annotation.Nonnull
    public Integer getDatastoreId() {
        return datastoreId;
    }

    public void setDatastoreId(@javax.annotation.Nonnull Integer datastoreId) {
        this.datastoreId = datastoreId;
    }

    public TestSummary access(@javax.annotation.Nonnull Access access) {
        this.access = access;
        return this;
    }

    /**
     * Access rights for the test. This defines the visibility of the Test in the UI
     *
     * @return access
     */
    @javax.annotation.Nonnull
    public Access getAccess() {
        return access;
    }

    public void setAccess(@javax.annotation.Nonnull Access access) {
        this.access = access;
    }

    public TestSummary owner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Name of the team that owns the test. Users must belong to the team that owns a test to make modifications
     *
     * @return owner
     */
    @javax.annotation.Nonnull
    public String getOwner() {
        return owner;
    }

    public void setOwner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TestSummary testSummary = (TestSummary) o;
        return Objects.equals(this.id, testSummary.id) &&
            Objects.equals(this.name, testSummary.name) &&
            Objects.equals(this.folder, testSummary.folder) &&
            Objects.equals(this.description, testSummary.description) &&
            Objects.equals(this.datasets, testSummary.datasets) &&
            Objects.equals(this.runs, testSummary.runs) &&
            Objects.equals(this.watching, testSummary.watching) &&
            Objects.equals(this.datastoreId, testSummary.datastoreId) &&
            Objects.equals(this.access, testSummary.access) &&
            Objects.equals(this.owner, testSummary.owner);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, folder, description, datasets, runs, watching, datastoreId, access, owner);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TestSummary {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
        sb.append("    runs: ").append(toIndentedString(runs)).append("\n");
        sb.append("    watching: ").append(toIndentedString(watching)).append("\n");
        sb.append("    datastoreId: ").append(toIndentedString(datastoreId)).append("\n");
        sb.append("    access: ").append(toIndentedString(access)).append("\n");
        sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("access");
        openapiFields.add("owner");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("datastoreId");
        openapiRequiredFields.add("access");
        openapiRequiredFields.add("owner");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TestSummary
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TestSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in TestSummary is not found in the empty JSON string",
                    TestSummary.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TestSummary.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `TestSummary` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : TestSummary.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("folder").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("description").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("watching") != null && !jsonObj.get("watching").isJsonNull() && !jsonObj.get("watching").isJsonArray()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `watching` to be an array in the JSON string but got `%s`", jsonObj.get("watching").toString()));
        }
        // validate the required field `access`
        Access.validateJsonElement(jsonObj.get("access"));
        if (!jsonObj.get("owner").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TestSummary.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TestSummary' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TestSummary> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(TestSummary.class));

            return (TypeAdapter<T>) new TypeAdapter<TestSummary>() {
                @Override
                public void write(JsonWriter out, TestSummary value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public TestSummary read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of TestSummary given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TestSummary
     * @throws IOException if the JSON string is invalid with respect to TestSummary
     */
    public static TestSummary fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TestSummary.class);
    }

    /**
     * Convert an instance of TestSummary to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

