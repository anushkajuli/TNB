/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * Table Report Data
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class TableReportDataInner {
    public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
    @SerializedName(SERIALIZED_NAME_DATASET_ID)
    @javax.annotation.Nonnull
    private Integer datasetId;

    public static final String SERIALIZED_NAME_RUN_ID = "runId";
    @SerializedName(SERIALIZED_NAME_RUN_ID)
    @javax.annotation.Nonnull
    private Integer runId;

    public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
    @SerializedName(SERIALIZED_NAME_ORDINAL)
    @javax.annotation.Nonnull
    private Integer ordinal;

    public static final String SERIALIZED_NAME_CATEGORY = "category";
    @SerializedName(SERIALIZED_NAME_CATEGORY)
    @javax.annotation.Nonnull
    private String category;

    public static final String SERIALIZED_NAME_SERIES = "series";
    @SerializedName(SERIALIZED_NAME_SERIES)
    @javax.annotation.Nonnull
    private String series;

    public static final String SERIALIZED_NAME_SCALE = "scale";
    @SerializedName(SERIALIZED_NAME_SCALE)
    @javax.annotation.Nonnull
    private String scale;

    public static final String SERIALIZED_NAME_VALUES = "values";
    @SerializedName(SERIALIZED_NAME_VALUES)
    @javax.annotation.Nonnull
    private List<BigDecimal> values = new ArrayList<>();

    public TableReportDataInner() {
    }

    public TableReportDataInner datasetId(@javax.annotation.Nonnull Integer datasetId) {
        this.datasetId = datasetId;
        return this;
    }

    /**
     * Get datasetId
     *
     * @return datasetId
     */
    @javax.annotation.Nonnull
    public Integer getDatasetId() {
        return datasetId;
    }

    public void setDatasetId(@javax.annotation.Nonnull Integer datasetId) {
        this.datasetId = datasetId;
    }

    public TableReportDataInner runId(@javax.annotation.Nonnull Integer runId) {
        this.runId = runId;
        return this;
    }

    /**
     * Get runId
     *
     * @return runId
     */
    @javax.annotation.Nonnull
    public Integer getRunId() {
        return runId;
    }

    public void setRunId(@javax.annotation.Nonnull Integer runId) {
        this.runId = runId;
    }

    public TableReportDataInner ordinal(@javax.annotation.Nonnull Integer ordinal) {
        this.ordinal = ordinal;
        return this;
    }

    /**
     * Get ordinal
     *
     * @return ordinal
     */
    @javax.annotation.Nonnull
    public Integer getOrdinal() {
        return ordinal;
    }

    public void setOrdinal(@javax.annotation.Nonnull Integer ordinal) {
        this.ordinal = ordinal;
    }

    public TableReportDataInner category(@javax.annotation.Nonnull String category) {
        this.category = category;
        return this;
    }

    /**
     * Get category
     *
     * @return category
     */
    @javax.annotation.Nonnull
    public String getCategory() {
        return category;
    }

    public void setCategory(@javax.annotation.Nonnull String category) {
        this.category = category;
    }

    public TableReportDataInner series(@javax.annotation.Nonnull String series) {
        this.series = series;
        return this;
    }

    /**
     * Get series
     *
     * @return series
     */
    @javax.annotation.Nonnull
    public String getSeries() {
        return series;
    }

    public void setSeries(@javax.annotation.Nonnull String series) {
        this.series = series;
    }

    public TableReportDataInner scale(@javax.annotation.Nonnull String scale) {
        this.scale = scale;
        return this;
    }

    /**
     * Get scale
     *
     * @return scale
     */
    @javax.annotation.Nonnull
    public String getScale() {
        return scale;
    }

    public void setScale(@javax.annotation.Nonnull String scale) {
        this.scale = scale;
    }

    public TableReportDataInner values(@javax.annotation.Nonnull List<BigDecimal> values) {
        this.values = values;
        return this;
    }

    public TableReportDataInner addValuesItem(BigDecimal valuesItem) {
        if (this.values == null) {
            this.values = new ArrayList<>();
        }
        this.values.add(valuesItem);
        return this;
    }

    /**
     * Array of values
     *
     * @return values
     */
    @javax.annotation.Nonnull
    public List<BigDecimal> getValues() {
        return values;
    }

    public void setValues(@javax.annotation.Nonnull List<BigDecimal> values) {
        this.values = values;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TableReportDataInner tableReportDataInner = (TableReportDataInner) o;
        return Objects.equals(this.datasetId, tableReportDataInner.datasetId) &&
            Objects.equals(this.runId, tableReportDataInner.runId) &&
            Objects.equals(this.ordinal, tableReportDataInner.ordinal) &&
            Objects.equals(this.category, tableReportDataInner.category) &&
            Objects.equals(this.series, tableReportDataInner.series) &&
            Objects.equals(this.scale, tableReportDataInner.scale) &&
            Objects.equals(this.values, tableReportDataInner.values);
    }

    @Override
    public int hashCode() {
        return Objects.hash(datasetId, runId, ordinal, category, series, scale, values);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TableReportDataInner {\n");
        sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
        sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
        sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    series: ").append(toIndentedString(series)).append("\n");
        sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
        sb.append("    values: ").append(toIndentedString(values)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("datasetId");
        openapiFields.add("runId");
        openapiFields.add("ordinal");
        openapiFields.add("category");
        openapiFields.add("series");
        openapiFields.add("scale");
        openapiFields.add("values");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("datasetId");
        openapiRequiredFields.add("runId");
        openapiRequiredFields.add("ordinal");
        openapiRequiredFields.add("category");
        openapiRequiredFields.add("series");
        openapiRequiredFields.add("scale");
        openapiRequiredFields.add("values");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TableReportDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TableReportDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                    String.format("The required field(s) %s in TableReportDataInner is not found in the empty JSON string",
                        TableReportDataInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TableReportDataInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `TableReportDataInner` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : TableReportDataInner.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("category").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("category").toString()));
        }
        if (!jsonObj.get("series").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `series` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("series").toString()));
        }
        if (!jsonObj.get("scale").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `scale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scale").toString()));
        }
        // ensure the required json array is present
        if (jsonObj.get("values") == null) {
            throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
        } else if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TableReportDataInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TableReportDataInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TableReportDataInner> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(TableReportDataInner.class));

            return (TypeAdapter<T>) new TypeAdapter<TableReportDataInner>() {
                @Override
                public void write(JsonWriter out, TableReportDataInner value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public TableReportDataInner read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of TableReportDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TableReportDataInner
     * @throws IOException if the JSON string is invalid with respect to TableReportDataInner
     */
    public static TableReportDataInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TableReportDataInner.class);
    }

    /**
     * Convert an instance of TableReportDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

