/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * Type of backend datastore
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class ElasticsearchDatastoreConfig {
    public static final String SERIALIZED_NAME_BUILT_IN = "builtIn";
    @SerializedName(SERIALIZED_NAME_BUILT_IN)
    @javax.annotation.Nonnull
    private Boolean builtIn;

    public static final String SERIALIZED_NAME_API_KEY = "apiKey";
    @SerializedName(SERIALIZED_NAME_API_KEY)
    @javax.annotation.Nullable
    private String apiKey;

    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    @javax.annotation.Nonnull
    private String url;

    public static final String SERIALIZED_NAME_USERNAME = "username";
    @SerializedName(SERIALIZED_NAME_USERNAME)
    @javax.annotation.Nullable
    private String username;

    public static final String SERIALIZED_NAME_PASSWORD = "password";
    @SerializedName(SERIALIZED_NAME_PASSWORD)
    @javax.annotation.Nullable
    private String password;

    public ElasticsearchDatastoreConfig() {
    }

    public ElasticsearchDatastoreConfig builtIn(@javax.annotation.Nonnull Boolean builtIn) {
        this.builtIn = builtIn;
        return this;
    }

    /**
     * Built In
     *
     * @return builtIn
     */
    @javax.annotation.Nonnull
    public Boolean getBuiltIn() {
        return builtIn;
    }

    public void setBuiltIn(@javax.annotation.Nonnull Boolean builtIn) {
        this.builtIn = builtIn;
    }

    public ElasticsearchDatastoreConfig apiKey(@javax.annotation.Nullable String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Elasticsearch API KEY
     *
     * @return apiKey
     */
    @javax.annotation.Nullable
    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(@javax.annotation.Nullable String apiKey) {
        this.apiKey = apiKey;
    }

    public ElasticsearchDatastoreConfig url(@javax.annotation.Nonnull String url) {
        this.url = url;
        return this;
    }

    /**
     * Elasticsearch url
     *
     * @return url
     */
    @javax.annotation.Nonnull
    public String getUrl() {
        return url;
    }

    public void setUrl(@javax.annotation.Nonnull String url) {
        this.url = url;
    }

    public ElasticsearchDatastoreConfig username(@javax.annotation.Nullable String username) {
        this.username = username;
        return this;
    }

    /**
     * Elasticsearch username
     *
     * @return username
     */
    @javax.annotation.Nullable
    public String getUsername() {
        return username;
    }

    public void setUsername(@javax.annotation.Nullable String username) {
        this.username = username;
    }

    public ElasticsearchDatastoreConfig password(@javax.annotation.Nullable String password) {
        this.password = password;
        return this;
    }

    /**
     * Elasticsearch password
     *
     * @return password
     */
    @javax.annotation.Nullable
    public String getPassword() {
        return password;
    }

    public void setPassword(@javax.annotation.Nullable String password) {
        this.password = password;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ElasticsearchDatastoreConfig elasticsearchDatastoreConfig = (ElasticsearchDatastoreConfig) o;
        return Objects.equals(this.builtIn, elasticsearchDatastoreConfig.builtIn) &&
            Objects.equals(this.apiKey, elasticsearchDatastoreConfig.apiKey) &&
            Objects.equals(this.url, elasticsearchDatastoreConfig.url) &&
            Objects.equals(this.username, elasticsearchDatastoreConfig.username) &&
            Objects.equals(this.password, elasticsearchDatastoreConfig.password);
    }

    @Override
    public int hashCode() {
        return Objects.hash(builtIn, apiKey, url, username, password);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ElasticsearchDatastoreConfig {\n");
        sb.append("    builtIn: ").append(toIndentedString(builtIn)).append("\n");
        sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    username: ").append(toIndentedString(username)).append("\n");
        sb.append("    password: ").append(toIndentedString(password)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("builtIn");
        openapiFields.add("apiKey");
        openapiFields.add("url");
        openapiFields.add("username");
        openapiFields.add("password");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("builtIn");
        openapiRequiredFields.add("url");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ElasticsearchDatastoreConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ElasticsearchDatastoreConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                    String.format("The required field(s) %s in ElasticsearchDatastoreConfig is not found in the empty JSON string",
                        ElasticsearchDatastoreConfig.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ElasticsearchDatastoreConfig.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `ElasticsearchDatastoreConfig` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ElasticsearchDatastoreConfig.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("apiKey").toString()));
        }
        if (!jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
        }
        if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("username").toString()));
        }
        if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("password").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ElasticsearchDatastoreConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ElasticsearchDatastoreConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ElasticsearchDatastoreConfig> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(ElasticsearchDatastoreConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<ElasticsearchDatastoreConfig>() {
                @Override
                public void write(JsonWriter out, ElasticsearchDatastoreConfig value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public ElasticsearchDatastoreConfig read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of ElasticsearchDatastoreConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ElasticsearchDatastoreConfig
     * @throws IOException if the JSON string is invalid with respect to ElasticsearchDatastoreConfig
     */
    public static ElasticsearchDatastoreConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ElasticsearchDatastoreConfig.class);
    }

    /**
     * Convert an instance of ElasticsearchDatastoreConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

