/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * ApiKeyResponse
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class ApiKeyResponse {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    @javax.annotation.Nullable
    private Long id;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    @javax.annotation.Nullable
    private KeyType type;

    public static final String SERIALIZED_NAME_CREATION = "creation";
    @SerializedName(SERIALIZED_NAME_CREATION)
    @javax.annotation.Nullable
    private OffsetDateTime creation;

    public static final String SERIALIZED_NAME_ACCESS = "access";
    @SerializedName(SERIALIZED_NAME_ACCESS)
    @javax.annotation.Nullable
    private OffsetDateTime access;

    public static final String SERIALIZED_NAME_IS_REVOKED = "isRevoked";
    @SerializedName(SERIALIZED_NAME_IS_REVOKED)
    @javax.annotation.Nullable
    private Boolean isRevoked;

    public static final String SERIALIZED_NAME_TO_EXPIRATION = "toExpiration";
    @SerializedName(SERIALIZED_NAME_TO_EXPIRATION)
    @javax.annotation.Nullable
    private Long toExpiration;

    public ApiKeyResponse() {
    }

    public ApiKeyResponse id(@javax.annotation.Nullable Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nullable
    public Long getId() {
        return id;
    }

    public void setId(@javax.annotation.Nullable Long id) {
        this.id = id;
    }

    public ApiKeyResponse name(@javax.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nullable String name) {
        this.name = name;
    }

    public ApiKeyResponse type(@javax.annotation.Nullable KeyType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @javax.annotation.Nullable
    public KeyType getType() {
        return type;
    }

    public void setType(@javax.annotation.Nullable KeyType type) {
        this.type = type;
    }

    public ApiKeyResponse creation(@javax.annotation.Nullable OffsetDateTime creation) {
        this.creation = creation;
        return this;
    }

    /**
     * Get creation
     *
     * @return creation
     */
    @javax.annotation.Nullable
    public OffsetDateTime getCreation() {
        return creation;
    }

    public void setCreation(@javax.annotation.Nullable OffsetDateTime creation) {
        this.creation = creation;
    }

    public ApiKeyResponse access(@javax.annotation.Nullable OffsetDateTime access) {
        this.access = access;
        return this;
    }

    /**
     * Get access
     *
     * @return access
     */
    @javax.annotation.Nullable
    public OffsetDateTime getAccess() {
        return access;
    }

    public void setAccess(@javax.annotation.Nullable OffsetDateTime access) {
        this.access = access;
    }

    public ApiKeyResponse isRevoked(@javax.annotation.Nullable Boolean isRevoked) {
        this.isRevoked = isRevoked;
        return this;
    }

    /**
     * Get isRevoked
     *
     * @return isRevoked
     */
    @javax.annotation.Nullable
    public Boolean getIsRevoked() {
        return isRevoked;
    }

    public void setIsRevoked(@javax.annotation.Nullable Boolean isRevoked) {
        this.isRevoked = isRevoked;
    }

    public ApiKeyResponse toExpiration(@javax.annotation.Nullable Long toExpiration) {
        this.toExpiration = toExpiration;
        return this;
    }

    /**
     * Get toExpiration
     *
     * @return toExpiration
     */
    @javax.annotation.Nullable
    public Long getToExpiration() {
        return toExpiration;
    }

    public void setToExpiration(@javax.annotation.Nullable Long toExpiration) {
        this.toExpiration = toExpiration;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiKeyResponse apiKeyResponse = (ApiKeyResponse) o;
        return Objects.equals(this.id, apiKeyResponse.id) &&
            Objects.equals(this.name, apiKeyResponse.name) &&
            Objects.equals(this.type, apiKeyResponse.type) &&
            Objects.equals(this.creation, apiKeyResponse.creation) &&
            Objects.equals(this.access, apiKeyResponse.access) &&
            Objects.equals(this.isRevoked, apiKeyResponse.isRevoked) &&
            Objects.equals(this.toExpiration, apiKeyResponse.toExpiration);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, type, creation, access, isRevoked, toExpiration);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApiKeyResponse {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    creation: ").append(toIndentedString(creation)).append("\n");
        sb.append("    access: ").append(toIndentedString(access)).append("\n");
        sb.append("    isRevoked: ").append(toIndentedString(isRevoked)).append("\n");
        sb.append("    toExpiration: ").append(toIndentedString(toExpiration)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("type");
        openapiFields.add("creation");
        openapiFields.add("access");
        openapiFields.add("isRevoked");
        openapiFields.add("toExpiration");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ApiKeyResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ApiKeyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in ApiKeyResponse is not found in the empty JSON string",
                    ApiKeyResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ApiKeyResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `ApiKeyResponse` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        // validate the optional field `type`
        if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
            KeyType.validateJsonElement(jsonObj.get("type"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ApiKeyResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ApiKeyResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ApiKeyResponse> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(ApiKeyResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<ApiKeyResponse>() {
                @Override
                public void write(JsonWriter out, ApiKeyResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public ApiKeyResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of ApiKeyResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ApiKeyResponse
     * @throws IOException if the JSON string is invalid with respect to ApiKeyResponse
     */
    public static ApiKeyResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ApiKeyResponse.class);
    }

    /**
     * Convert an instance of ApiKeyResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

