/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * Represents a Test with all associated data used for export/import operations.
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class TestExport {
    public static final String SERIALIZED_NAME_VARIABLES = "variables";
    @SerializedName(SERIALIZED_NAME_VARIABLES)
    @javax.annotation.Nullable
    private List<Variable> variables = new ArrayList<>();

    public static final String SERIALIZED_NAME_MISSING_DATA_RULES = "missingDataRules";
    @SerializedName(SERIALIZED_NAME_MISSING_DATA_RULES)
    @javax.annotation.Nullable
    private List<MissingDataRule> missingDataRules = new ArrayList<>();

    public static final String SERIALIZED_NAME_EXPERIMENTS = "experiments";
    @SerializedName(SERIALIZED_NAME_EXPERIMENTS)
    @javax.annotation.Nullable
    private List<ExperimentProfile> experiments = new ArrayList<>();

    public static final String SERIALIZED_NAME_ACTIONS = "actions";
    @SerializedName(SERIALIZED_NAME_ACTIONS)
    @javax.annotation.Nullable
    private List<Action> actions = new ArrayList<>();

    public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
    @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
    @javax.annotation.Nullable
    private Watch subscriptions;

    public static final String SERIALIZED_NAME_DATASTORE = "datastore";
    @SerializedName(SERIALIZED_NAME_DATASTORE)
    @javax.annotation.Nullable
    private Datastore datastore;

    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    @javax.annotation.Nonnull
    private Integer id;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nonnull
    private String name;

    public static final String SERIALIZED_NAME_FOLDER = "folder";
    @SerializedName(SERIALIZED_NAME_FOLDER)
    @javax.annotation.Nullable
    private String folder;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_DATASTORE_ID = "datastoreId";
    @SerializedName(SERIALIZED_NAME_DATASTORE_ID)
    @javax.annotation.Nonnull
    private Integer datastoreId;

    public static final String SERIALIZED_NAME_TIMELINE_LABELS = "timelineLabels";
    @SerializedName(SERIALIZED_NAME_TIMELINE_LABELS)
    @javax.annotation.Nullable
    private List<String> timelineLabels = new ArrayList<>();

    public static final String SERIALIZED_NAME_TIMELINE_FUNCTION = "timelineFunction";
    @SerializedName(SERIALIZED_NAME_TIMELINE_FUNCTION)
    @javax.annotation.Nullable
    private String timelineFunction;

    public static final String SERIALIZED_NAME_FINGERPRINT_LABELS = "fingerprintLabels";
    @SerializedName(SERIALIZED_NAME_FINGERPRINT_LABELS)
    @javax.annotation.Nullable
    private List<String> fingerprintLabels = new ArrayList<>();

    public static final String SERIALIZED_NAME_FINGERPRINT_FILTER = "fingerprintFilter";
    @SerializedName(SERIALIZED_NAME_FINGERPRINT_FILTER)
    @javax.annotation.Nullable
    private String fingerprintFilter;

    public static final String SERIALIZED_NAME_COMPARE_URL = "compareUrl";
    @SerializedName(SERIALIZED_NAME_COMPARE_URL)
    @javax.annotation.Nullable
    private String compareUrl;

    public static final String SERIALIZED_NAME_TRANSFORMERS = "transformers";
    @SerializedName(SERIALIZED_NAME_TRANSFORMERS)
    @javax.annotation.Nullable
    private List<Transformer> transformers = new ArrayList<>();

    public static final String SERIALIZED_NAME_NOTIFICATIONS_ENABLED = "notificationsEnabled";
    @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_ENABLED)
    @javax.annotation.Nonnull
    private Boolean notificationsEnabled;

    public static final String SERIALIZED_NAME_ACCESS = "access";
    @SerializedName(SERIALIZED_NAME_ACCESS)
    @javax.annotation.Nonnull
    private Access access;

    public static final String SERIALIZED_NAME_OWNER = "owner";
    @SerializedName(SERIALIZED_NAME_OWNER)
    @javax.annotation.Nonnull
    private String owner;

    public TestExport() {
    }

    public TestExport variables(@javax.annotation.Nullable List<Variable> variables) {
        this.variables = variables;
        return this;
    }

    public TestExport addVariablesItem(Variable variablesItem) {
        if (this.variables == null) {
            this.variables = new ArrayList<>();
        }
        this.variables.add(variablesItem);
        return this;
    }

    /**
     * Array of Variables associated with test
     *
     * @return variables
     */
    @javax.annotation.Nullable
    public List<Variable> getVariables() {
        return variables;
    }

    public void setVariables(@javax.annotation.Nullable List<Variable> variables) {
        this.variables = variables;
    }

    public TestExport missingDataRules(@javax.annotation.Nullable List<MissingDataRule> missingDataRules) {
        this.missingDataRules = missingDataRules;
        return this;
    }

    public TestExport addMissingDataRulesItem(MissingDataRule missingDataRulesItem) {
        if (this.missingDataRules == null) {
            this.missingDataRules = new ArrayList<>();
        }
        this.missingDataRules.add(missingDataRulesItem);
        return this;
    }

    /**
     * Array of MissingDataRules associated with test
     *
     * @return missingDataRules
     */
    @javax.annotation.Nullable
    public List<MissingDataRule> getMissingDataRules() {
        return missingDataRules;
    }

    public void setMissingDataRules(@javax.annotation.Nullable List<MissingDataRule> missingDataRules) {
        this.missingDataRules = missingDataRules;
    }

    public TestExport experiments(@javax.annotation.Nullable List<ExperimentProfile> experiments) {
        this.experiments = experiments;
        return this;
    }

    public TestExport addExperimentsItem(ExperimentProfile experimentsItem) {
        if (this.experiments == null) {
            this.experiments = new ArrayList<>();
        }
        this.experiments.add(experimentsItem);
        return this;
    }

    /**
     * Array of ExperimentProfiles associated with test
     *
     * @return experiments
     */
    @javax.annotation.Nullable
    public List<ExperimentProfile> getExperiments() {
        return experiments;
    }

    public void setExperiments(@javax.annotation.Nullable List<ExperimentProfile> experiments) {
        this.experiments = experiments;
    }

    public TestExport actions(@javax.annotation.Nullable List<Action> actions) {
        this.actions = actions;
        return this;
    }

    public TestExport addActionsItem(Action actionsItem) {
        if (this.actions == null) {
            this.actions = new ArrayList<>();
        }
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * Array of Actions associated with test
     *
     * @return actions
     */
    @javax.annotation.Nullable
    public List<Action> getActions() {
        return actions;
    }

    public void setActions(@javax.annotation.Nullable List<Action> actions) {
        this.actions = actions;
    }

    public TestExport subscriptions(@javax.annotation.Nullable Watch subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }

    /**
     * Watcher object associated with test
     *
     * @return subscriptions
     */
    @javax.annotation.Nullable
    public Watch getSubscriptions() {
        return subscriptions;
    }

    public void setSubscriptions(@javax.annotation.Nullable Watch subscriptions) {
        this.subscriptions = subscriptions;
    }

    public TestExport datastore(@javax.annotation.Nullable Datastore datastore) {
        this.datastore = datastore;
        return this;
    }

    /**
     * Datastore associated with test
     *
     * @return datastore
     */
    @javax.annotation.Nullable
    public Datastore getDatastore() {
        return datastore;
    }

    public void setDatastore(@javax.annotation.Nullable Datastore datastore) {
        this.datastore = datastore;
    }

    public TestExport id(@javax.annotation.Nonnull Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Unique Test id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public Integer getId() {
        return id;
    }

    public void setId(@javax.annotation.Nonnull Integer id) {
        this.id = id;
    }

    public TestExport name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Test name
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public TestExport folder(@javax.annotation.Nullable String folder) {
        this.folder = folder;
        return this;
    }

    /**
     * Name of folder that the test is stored in. Folders allow tests to be organised in the UI
     *
     * @return folder
     */
    @javax.annotation.Nullable
    public String getFolder() {
        return folder;
    }

    public void setFolder(@javax.annotation.Nullable String folder) {
        this.folder = folder;
    }

    public TestExport description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Description of the test
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }

    public TestExport datastoreId(@javax.annotation.Nonnull Integer datastoreId) {
        this.datastoreId = datastoreId;
        return this;
    }

    /**
     * backend ID for backing datastore
     *
     * @return datastoreId
     */
    @javax.annotation.Nonnull
    public Integer getDatastoreId() {
        return datastoreId;
    }

    public void setDatastoreId(@javax.annotation.Nonnull Integer datastoreId) {
        this.datastoreId = datastoreId;
    }

    public TestExport timelineLabels(@javax.annotation.Nullable List<String> timelineLabels) {
        this.timelineLabels = timelineLabels;
        return this;
    }

    public TestExport addTimelineLabelsItem(String timelineLabelsItem) {
        if (this.timelineLabels == null) {
            this.timelineLabels = new ArrayList<>();
        }
        this.timelineLabels.add(timelineLabelsItem);
        return this;
    }

    /**
     * List of label names that are used for determining metric to use as the time series
     *
     * @return timelineLabels
     */
    @javax.annotation.Nullable
    public List<String> getTimelineLabels() {
        return timelineLabels;
    }

    public void setTimelineLabels(@javax.annotation.Nullable List<String> timelineLabels) {
        this.timelineLabels = timelineLabels;
    }

    public TestExport timelineFunction(@javax.annotation.Nullable String timelineFunction) {
        this.timelineFunction = timelineFunction;
        return this;
    }

    /**
     * Label function to modify timeline labels to a produce a value used for ordering datapoints
     *
     * @return timelineFunction
     */
    @javax.annotation.Nullable
    public String getTimelineFunction() {
        return timelineFunction;
    }

    public void setTimelineFunction(@javax.annotation.Nullable String timelineFunction) {
        this.timelineFunction = timelineFunction;
    }

    public TestExport fingerprintLabels(@javax.annotation.Nullable List<String> fingerprintLabels) {
        this.fingerprintLabels = fingerprintLabels;
        return this;
    }

    public TestExport addFingerprintLabelsItem(String fingerprintLabelsItem) {
        if (this.fingerprintLabels == null) {
            this.fingerprintLabels = new ArrayList<>();
        }
        this.fingerprintLabels.add(fingerprintLabelsItem);
        return this;
    }

    /**
     * Array of Label names that are used to create a fingerprint
     *
     * @return fingerprintLabels
     */
    @javax.annotation.Nullable
    public List<String> getFingerprintLabels() {
        return fingerprintLabels;
    }

    public void setFingerprintLabels(@javax.annotation.Nullable List<String> fingerprintLabels) {
        this.fingerprintLabels = fingerprintLabels;
    }

    public TestExport fingerprintFilter(@javax.annotation.Nullable String fingerprintFilter) {
        this.fingerprintFilter = fingerprintFilter;
        return this;
    }

    /**
     * Filter function to filter out datasets that are comparable for the purpose of change detection
     *
     * @return fingerprintFilter
     */
    @javax.annotation.Nullable
    public String getFingerprintFilter() {
        return fingerprintFilter;
    }

    public void setFingerprintFilter(@javax.annotation.Nullable String fingerprintFilter) {
        this.fingerprintFilter = fingerprintFilter;
    }

    public TestExport compareUrl(@javax.annotation.Nullable String compareUrl) {
        this.compareUrl = compareUrl;
        return this;
    }

    /**
     * URL to external service that can be called to compare runs.  This is typically an external reporting/visulization service
     *
     * @return compareUrl
     */
    @javax.annotation.Nullable
    public String getCompareUrl() {
        return compareUrl;
    }

    public void setCompareUrl(@javax.annotation.Nullable String compareUrl) {
        this.compareUrl = compareUrl;
    }

    public TestExport transformers(@javax.annotation.Nullable List<Transformer> transformers) {
        this.transformers = transformers;
        return this;
    }

    public TestExport addTransformersItem(Transformer transformersItem) {
        if (this.transformers == null) {
            this.transformers = new ArrayList<>();
        }
        this.transformers.add(transformersItem);
        return this;
    }

    /**
     * Array for transformers defined for the Test
     *
     * @return transformers
     */
    @javax.annotation.Nullable
    public List<Transformer> getTransformers() {
        return transformers;
    }

    public void setTransformers(@javax.annotation.Nullable List<Transformer> transformers) {
        this.transformers = transformers;
    }

    public TestExport notificationsEnabled(@javax.annotation.Nonnull Boolean notificationsEnabled) {
        this.notificationsEnabled = notificationsEnabled;
        return this;
    }

    /**
     * Are notifications enabled for the test
     *
     * @return notificationsEnabled
     */
    @javax.annotation.Nonnull
    public Boolean getNotificationsEnabled() {
        return notificationsEnabled;
    }

    public void setNotificationsEnabled(@javax.annotation.Nonnull Boolean notificationsEnabled) {
        this.notificationsEnabled = notificationsEnabled;
    }

    public TestExport access(@javax.annotation.Nonnull Access access) {
        this.access = access;
        return this;
    }

    /**
     * Access rights for the test. This defines the visibility of the Test in the UI
     *
     * @return access
     */
    @javax.annotation.Nonnull
    public Access getAccess() {
        return access;
    }

    public void setAccess(@javax.annotation.Nonnull Access access) {
        this.access = access;
    }

    public TestExport owner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Name of the team that owns the test. Users must belong to the team that owns a test to make modifications
     *
     * @return owner
     */
    @javax.annotation.Nonnull
    public String getOwner() {
        return owner;
    }

    public void setOwner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TestExport testExport = (TestExport) o;
        return Objects.equals(this.variables, testExport.variables) &&
            Objects.equals(this.missingDataRules, testExport.missingDataRules) &&
            Objects.equals(this.experiments, testExport.experiments) &&
            Objects.equals(this.actions, testExport.actions) &&
            Objects.equals(this.subscriptions, testExport.subscriptions) &&
            Objects.equals(this.datastore, testExport.datastore) &&
            Objects.equals(this.id, testExport.id) &&
            Objects.equals(this.name, testExport.name) &&
            Objects.equals(this.folder, testExport.folder) &&
            Objects.equals(this.description, testExport.description) &&
            Objects.equals(this.datastoreId, testExport.datastoreId) &&
            Objects.equals(this.timelineLabels, testExport.timelineLabels) &&
            Objects.equals(this.timelineFunction, testExport.timelineFunction) &&
            Objects.equals(this.fingerprintLabels, testExport.fingerprintLabels) &&
            Objects.equals(this.fingerprintFilter, testExport.fingerprintFilter) &&
            Objects.equals(this.compareUrl, testExport.compareUrl) &&
            Objects.equals(this.transformers, testExport.transformers) &&
            Objects.equals(this.notificationsEnabled, testExport.notificationsEnabled) &&
            Objects.equals(this.access, testExport.access) &&
            Objects.equals(this.owner, testExport.owner);
    }

    @Override
    public int hashCode() {
        return Objects.hash(variables, missingDataRules, experiments, actions, subscriptions, datastore, id, name, folder, description, datastoreId,
            timelineLabels, timelineFunction, fingerprintLabels, fingerprintFilter, compareUrl, transformers, notificationsEnabled, access, owner);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TestExport {\n");
        sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
        sb.append("    missingDataRules: ").append(toIndentedString(missingDataRules)).append("\n");
        sb.append("    experiments: ").append(toIndentedString(experiments)).append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
        sb.append("    datastore: ").append(toIndentedString(datastore)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    datastoreId: ").append(toIndentedString(datastoreId)).append("\n");
        sb.append("    timelineLabels: ").append(toIndentedString(timelineLabels)).append("\n");
        sb.append("    timelineFunction: ").append(toIndentedString(timelineFunction)).append("\n");
        sb.append("    fingerprintLabels: ").append(toIndentedString(fingerprintLabels)).append("\n");
        sb.append("    fingerprintFilter: ").append(toIndentedString(fingerprintFilter)).append("\n");
        sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
        sb.append("    transformers: ").append(toIndentedString(transformers)).append("\n");
        sb.append("    notificationsEnabled: ").append(toIndentedString(notificationsEnabled)).append("\n");
        sb.append("    access: ").append(toIndentedString(access)).append("\n");
        sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("folder");
        openapiFields.add("description");
        openapiFields.add("datastoreId");
        openapiFields.add("timelineLabels");
        openapiFields.add("timelineFunction");
        openapiFields.add("fingerprintLabels");
        openapiFields.add("fingerprintFilter");
        openapiFields.add("compareUrl");
        openapiFields.add("transformers");
        openapiFields.add("notificationsEnabled");
        openapiFields.add("access");
        openapiFields.add("owner");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("datastoreId");
        openapiRequiredFields.add("notificationsEnabled");
        openapiRequiredFields.add("access");
        openapiRequiredFields.add("owner");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TestExport
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TestExport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in TestExport is not found in the empty JSON string",
                    TestExport.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TestExport.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `TestExport` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : TestExport.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("variables") != null && !jsonObj.get("variables").isJsonNull()) {
            JsonArray jsonArrayvariables = jsonObj.getAsJsonArray("variables");
            if (jsonArrayvariables != null) {
                // ensure the json data is an array
                if (!jsonObj.get("variables").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `variables` to be an array in the JSON string but got `%s`",
                        jsonObj.get("variables").toString()));
                }

                // validate the optional field `variables` (array)
                for (int i = 0; i < jsonArrayvariables.size(); i++) {
                    Variable.validateJsonElement(jsonArrayvariables.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("missingDataRules") != null && !jsonObj.get("missingDataRules").isJsonNull()) {
            JsonArray jsonArraymissingDataRules = jsonObj.getAsJsonArray("missingDataRules");
            if (jsonArraymissingDataRules != null) {
                // ensure the json data is an array
                if (!jsonObj.get("missingDataRules").isJsonArray()) {
                    throw new IllegalArgumentException(
                        String.format("Expected the field `missingDataRules` to be an array in the JSON string but got `%s`",
                            jsonObj.get("missingDataRules").toString()));
                }

                // validate the optional field `missingDataRules` (array)
                for (int i = 0; i < jsonArraymissingDataRules.size(); i++) {
                    MissingDataRule.validateJsonElement(jsonArraymissingDataRules.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("experiments") != null && !jsonObj.get("experiments").isJsonNull()) {
            JsonArray jsonArrayexperiments = jsonObj.getAsJsonArray("experiments");
            if (jsonArrayexperiments != null) {
                // ensure the json data is an array
                if (!jsonObj.get("experiments").isJsonArray()) {
                    throw new IllegalArgumentException(
                        String.format("Expected the field `experiments` to be an array in the JSON string but got `%s`",
                            jsonObj.get("experiments").toString()));
                }

                // validate the optional field `experiments` (array)
                for (int i = 0; i < jsonArrayexperiments.size(); i++) {
                    ExperimentProfile.validateJsonElement(jsonArrayexperiments.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
            JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
            if (jsonArrayactions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("actions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`",
                        jsonObj.get("actions").toString()));
                }

                // validate the optional field `actions` (array)
                for (int i = 0; i < jsonArrayactions.size(); i++) {
                    Action.validateJsonElement(jsonArrayactions.get(i));
                }
                ;
            }
        }
        // validate the optional field `subscriptions`
        if (jsonObj.get("subscriptions") != null && !jsonObj.get("subscriptions").isJsonNull()) {
            Watch.validateJsonElement(jsonObj.get("subscriptions"));
        }
        // validate the optional field `datastore`
        if (jsonObj.get("datastore") != null && !jsonObj.get("datastore").isJsonNull()) {
            Datastore.validateJsonElement(jsonObj.get("datastore"));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("folder").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("description").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("timelineLabels") != null && !jsonObj.get("timelineLabels").isJsonNull() && !jsonObj.get("timelineLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timelineLabels` to be an array in the JSON string but got `%s`",
                jsonObj.get("timelineLabels").toString()));
        }
        if ((jsonObj.get("timelineFunction") != null && !jsonObj.get("timelineFunction").isJsonNull()) && !jsonObj.get("timelineFunction")
            .isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `timelineFunction` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("timelineFunction").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("fingerprintLabels") != null && !jsonObj.get("fingerprintLabels").isJsonNull() && !jsonObj.get("fingerprintLabels")
            .isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fingerprintLabels` to be an array in the JSON string but got `%s`",
                jsonObj.get("fingerprintLabels").toString()));
        }
        if ((jsonObj.get("fingerprintFilter") != null && !jsonObj.get("fingerprintFilter").isJsonNull()) && !jsonObj.get("fingerprintFilter")
            .isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `fingerprintFilter` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("fingerprintFilter").toString()));
        }
        if ((jsonObj.get("compareUrl") != null && !jsonObj.get("compareUrl").isJsonNull()) && !jsonObj.get("compareUrl").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `compareUrl` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("compareUrl").toString()));
        }
        if (jsonObj.get("transformers") != null && !jsonObj.get("transformers").isJsonNull()) {
            JsonArray jsonArraytransformers = jsonObj.getAsJsonArray("transformers");
            if (jsonArraytransformers != null) {
                // ensure the json data is an array
                if (!jsonObj.get("transformers").isJsonArray()) {
                    throw new IllegalArgumentException(
                        String.format("Expected the field `transformers` to be an array in the JSON string but got `%s`",
                            jsonObj.get("transformers").toString()));
                }

                // validate the optional field `transformers` (array)
                for (int i = 0; i < jsonArraytransformers.size(); i++) {
                    Transformer.validateJsonElement(jsonArraytransformers.get(i));
                }
                ;
            }
        }
        // validate the required field `access`
        Access.validateJsonElement(jsonObj.get("access"));
        if (!jsonObj.get("owner").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TestExport.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TestExport' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TestExport> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(TestExport.class));

            return (TypeAdapter<T>) new TypeAdapter<TestExport>() {
                @Override
                public void write(JsonWriter out, TestExport value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public TestExport read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of TestExport given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TestExport
     * @throws IOException if the JSON string is invalid with respect to TestExport
     */
    public static TestExport fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TestExport.class);
    }

    /**
     * Convert an instance of TestExport to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

