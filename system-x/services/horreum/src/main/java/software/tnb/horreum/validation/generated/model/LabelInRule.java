/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * LabelInRule
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class LabelInRule {
    public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
    @SerializedName(SERIALIZED_NAME_RULE_ID)
    @javax.annotation.Nullable
    private Integer ruleId;

    public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
    @SerializedName(SERIALIZED_NAME_RULE_NAME)
    @javax.annotation.Nullable
    private String ruleName;

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    @javax.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_TEST_ID = "testId";
    @SerializedName(SERIALIZED_NAME_TEST_ID)
    @javax.annotation.Nullable
    private Integer testId;

    public static final String SERIALIZED_NAME_TEST_NAME = "testName";
    @SerializedName(SERIALIZED_NAME_TEST_NAME)
    @javax.annotation.Nullable
    private String testName;

    public LabelInRule() {
    }

    public LabelInRule ruleId(@javax.annotation.Nullable Integer ruleId) {
        this.ruleId = ruleId;
        return this;
    }

    /**
     * Get ruleId
     *
     * @return ruleId
     */
    @javax.annotation.Nullable
    public Integer getRuleId() {
        return ruleId;
    }

    public void setRuleId(@javax.annotation.Nullable Integer ruleId) {
        this.ruleId = ruleId;
    }

    public LabelInRule ruleName(@javax.annotation.Nullable String ruleName) {
        this.ruleName = ruleName;
        return this;
    }

    /**
     * Get ruleName
     *
     * @return ruleName
     */
    @javax.annotation.Nullable
    public String getRuleName() {
        return ruleName;
    }

    public void setRuleName(@javax.annotation.Nullable String ruleName) {
        this.ruleName = ruleName;
    }

    public LabelInRule type(@javax.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Location of Label usage
     *
     * @return type
     */
    @javax.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@javax.annotation.Nullable String type) {
        this.type = type;
    }

    public LabelInRule testId(@javax.annotation.Nullable Integer testId) {
        this.testId = testId;
        return this;
    }

    /**
     * Unique ID for location that references Schema
     *
     * @return testId
     */
    @javax.annotation.Nullable
    public Integer getTestId() {
        return testId;
    }

    public void setTestId(@javax.annotation.Nullable Integer testId) {
        this.testId = testId;
    }

    public LabelInRule testName(@javax.annotation.Nullable String testName) {
        this.testName = testName;
        return this;
    }

    /**
     * Test name that references Schema
     *
     * @return testName
     */
    @javax.annotation.Nullable
    public String getTestName() {
        return testName;
    }

    public void setTestName(@javax.annotation.Nullable String testName) {
        this.testName = testName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LabelInRule labelInRule = (LabelInRule) o;
        return Objects.equals(this.ruleId, labelInRule.ruleId) &&
            Objects.equals(this.ruleName, labelInRule.ruleName) &&
            Objects.equals(this.type, labelInRule.type) &&
            Objects.equals(this.testId, labelInRule.testId) &&
            Objects.equals(this.testName, labelInRule.testName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ruleId, ruleName, type, testId, testName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LabelInRule {\n");
        sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
        sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    testId: ").append(toIndentedString(testId)).append("\n");
        sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type");
        openapiFields.add("testId");
        openapiFields.add("testName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to LabelInRule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!LabelInRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in LabelInRule is not found in the empty JSON string",
                    LabelInRule.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!LabelInRule.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `LabelInRule` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("ruleName") != null && !jsonObj.get("ruleName").isJsonNull()) && !jsonObj.get("ruleName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("ruleName").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("testName") != null && !jsonObj.get("testName").isJsonNull()) && !jsonObj.get("testName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `testName` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("testName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!LabelInRule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'LabelInRule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<LabelInRule> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(LabelInRule.class));

            return (TypeAdapter<T>) new TypeAdapter<LabelInRule>() {
                @Override
                public void write(JsonWriter out, LabelInRule value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public LabelInRule read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of LabelInRule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of LabelInRule
     * @throws IOException if the JSON string is invalid with respect to LabelInRule
     */
    public static LabelInRule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, LabelInRule.class);
    }

    /**
     * Convert an instance of LabelInRule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

