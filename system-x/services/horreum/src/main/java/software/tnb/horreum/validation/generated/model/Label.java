/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.tnb.horreum.validation.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import software.tnb.horreum.validation.generated.JSON;

/**
 * A Label is a core component of Horreum, defining which components of the JSON document are part of a KPI and how the metric values are calculated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]", comments = "Generator version: 7.10.0")
public class Label {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_EXTRACTORS = "extractors";
  @SerializedName(SERIALIZED_NAME_EXTRACTORS)
  @javax.annotation.Nonnull
  private List<Extractor> extractors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  @javax.annotation.Nullable
  private String function;

  public static final String SERIALIZED_NAME_FILTERING = "filtering";
  @SerializedName(SERIALIZED_NAME_FILTERING)
  @javax.annotation.Nonnull
  private Boolean filtering;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  @javax.annotation.Nonnull
  private Boolean metrics;

  public static final String SERIALIZED_NAME_SCHEMA_ID = "schemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  @javax.annotation.Nonnull
  private Integer schemaId;

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  @javax.annotation.Nonnull
  private Access access;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  @javax.annotation.Nonnull
  private String owner;

  public Label() {
  }

  public Label id(@javax.annotation.Nonnull Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID for Label
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull Integer id) {
    this.id = id;
  }


  public Label name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name for label. NOTE: all Labels are considered to have the same semantic meaning throughout the entire system
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public Label extractors(@javax.annotation.Nonnull List<Extractor> extractors) {
    this.extractors = extractors;
    return this;
  }

  public Label addExtractorsItem(Extractor extractorsItem) {
    if (this.extractors == null) {
      this.extractors = new ArrayList<>();
    }
    this.extractors.add(extractorsItem);
    return this;
  }

  /**
   * A collection of Extractors, that will be combined in the Combination Function
   * @return extractors
   */
  @javax.annotation.Nonnull
  public List<Extractor> getExtractors() {
    return extractors;
  }

  public void setExtractors(@javax.annotation.Nonnull List<Extractor> extractors) {
    this.extractors = extractors;
  }


  public Label function(@javax.annotation.Nullable String function) {
    this.function = function;
    return this;
  }

  /**
   * A Combination Function that defines how values from Extractors are combined to produce a Label Value
   * @return function
   */
  @javax.annotation.Nullable
  public String getFunction() {
    return function;
  }

  public void setFunction(@javax.annotation.Nullable String function) {
    this.function = function;
  }


  public Label filtering(@javax.annotation.Nonnull Boolean filtering) {
    this.filtering = filtering;
    return this;
  }

  /**
   * Is Label a filtering label? Filtering labels contains values that are used to filter datasets for comparison
   * @return filtering
   */
  @javax.annotation.Nonnull
  public Boolean getFiltering() {
    return filtering;
  }

  public void setFiltering(@javax.annotation.Nonnull Boolean filtering) {
    this.filtering = filtering;
  }


  public Label metrics(@javax.annotation.Nonnull Boolean metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Is Label a metrics label? Metrics labels are contain Metrics that are used for comparison
   * @return metrics
   */
  @javax.annotation.Nonnull
  public Boolean getMetrics() {
    return metrics;
  }

  public void setMetrics(@javax.annotation.Nonnull Boolean metrics) {
    this.metrics = metrics;
  }


  public Label schemaId(@javax.annotation.Nonnull Integer schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * Schema ID that the Label relates to
   * @return schemaId
   */
  @javax.annotation.Nonnull
  public Integer getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(@javax.annotation.Nonnull Integer schemaId) {
    this.schemaId = schemaId;
  }


  public Label access(@javax.annotation.Nonnull Access access) {
    this.access = access;
    return this;
  }

  /**
   * Access rights for the test. This defines the visibility of the Test in the UI
   * @return access
   */
  @javax.annotation.Nonnull
  public Access getAccess() {
    return access;
  }

  public void setAccess(@javax.annotation.Nonnull Access access) {
    this.access = access;
  }


  public Label owner(@javax.annotation.Nonnull String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Name of the team that owns the test. Users must belong to the team that owns a test to make modifications
   * @return owner
   */
  @javax.annotation.Nonnull
  public String getOwner() {
    return owner;
  }

  public void setOwner(@javax.annotation.Nonnull String owner) {
    this.owner = owner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Label label = (Label) o;
    return Objects.equals(this.id, label.id) &&
        Objects.equals(this.name, label.name) &&
        Objects.equals(this.extractors, label.extractors) &&
        Objects.equals(this.function, label.function) &&
        Objects.equals(this.filtering, label.filtering) &&
        Objects.equals(this.metrics, label.metrics) &&
        Objects.equals(this.schemaId, label.schemaId) &&
        Objects.equals(this.access, label.access) &&
        Objects.equals(this.owner, label.owner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, extractors, function, filtering, metrics, schemaId, access, owner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Label {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    extractors: ").append(toIndentedString(extractors)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    filtering: ").append(toIndentedString(filtering)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("extractors");
    openapiRequiredFields.add("filtering");
    openapiRequiredFields.add("metrics");
    openapiRequiredFields.add("schemaId");
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("owner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Label
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Label.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Label is not found in the empty JSON string", Label.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Label.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Label` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Label.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("extractors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extractors` to be an array in the JSON string but got `%s`", jsonObj.get("extractors").toString()));
      }

      JsonArray jsonArrayextractors = jsonObj.getAsJsonArray("extractors");
      // validate the required field `extractors` (array)
      for (int i = 0; i < jsonArrayextractors.size(); i++) {
        Extractor.validateJsonElement(jsonArrayextractors.get(i));
      };
      if ((jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) && !jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
      // validate the required field `access`
      Access.validateJsonElement(jsonObj.get("access"));
      if (!jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Label.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Label' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Label> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Label.class));

       return (TypeAdapter<T>) new TypeAdapter<Label>() {
           @Override
           public void write(JsonWriter out, Label value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Label read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Label given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Label
   * @throws IOException if the JSON string is invalid with respect to Label
   */
  public static Label fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Label.class);
  }

  /**
   * Convert an instance of Label to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

