/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * A transformer extracts labals and applies a Function to convert a Run into one or more Datasets
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class Transformer {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    @javax.annotation.Nonnull
    private Integer id;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nonnull
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_TARGET_SCHEMA_URI = "targetSchemaUri";
    @SerializedName(SERIALIZED_NAME_TARGET_SCHEMA_URI)
    @javax.annotation.Nullable
    private String targetSchemaUri;

    public static final String SERIALIZED_NAME_EXTRACTORS = "extractors";
    @SerializedName(SERIALIZED_NAME_EXTRACTORS)
    @javax.annotation.Nonnull
    private List<Extractor> extractors = new ArrayList<>();

    public static final String SERIALIZED_NAME_FUNCTION = "function";
    @SerializedName(SERIALIZED_NAME_FUNCTION)
    @javax.annotation.Nullable
    private String function;

    public static final String SERIALIZED_NAME_SCHEMA_ID = "schemaId";
    @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
    @javax.annotation.Nonnull
    private Integer schemaId;

    public static final String SERIALIZED_NAME_SCHEMA_URI = "schemaUri";
    @SerializedName(SERIALIZED_NAME_SCHEMA_URI)
    @javax.annotation.Nonnull
    private String schemaUri;

    public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
    @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
    @javax.annotation.Nonnull
    private String schemaName;

    public static final String SERIALIZED_NAME_ACCESS = "access";
    @SerializedName(SERIALIZED_NAME_ACCESS)
    @javax.annotation.Nonnull
    private Access access;

    public static final String SERIALIZED_NAME_OWNER = "owner";
    @SerializedName(SERIALIZED_NAME_OWNER)
    @javax.annotation.Nonnull
    private String owner;

    public Transformer() {
    }

    public Transformer id(@javax.annotation.Nonnull Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Unique Transformer id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public Integer getId() {
        return id;
    }

    public void setId(@javax.annotation.Nonnull Integer id) {
        this.id = id;
    }

    public Transformer name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * Transformer name
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public Transformer description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Transformer description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }

    public Transformer targetSchemaUri(@javax.annotation.Nullable String targetSchemaUri) {
        this.targetSchemaUri = targetSchemaUri;
        return this;
    }

    /**
     * The schema associated with the calculated Datasets. Where a transformer creates a new JSON object with a new structure, this Schema is used
     * to extafct values from the new Dataset JSON document
     *
     * @return targetSchemaUri
     */
    @javax.annotation.Nullable
    public String getTargetSchemaUri() {
        return targetSchemaUri;
    }

    public void setTargetSchemaUri(@javax.annotation.Nullable String targetSchemaUri) {
        this.targetSchemaUri = targetSchemaUri;
    }

    public Transformer extractors(@javax.annotation.Nonnull List<Extractor> extractors) {
        this.extractors = extractors;
        return this;
    }

    public Transformer addExtractorsItem(Extractor extractorsItem) {
        if (this.extractors == null) {
            this.extractors = new ArrayList<>();
        }
        this.extractors.add(extractorsItem);
        return this;
    }

    /**
     * A collection of extractors to extract JSON values to create new Dataset JSON document
     *
     * @return extractors
     */
    @javax.annotation.Nonnull
    public List<Extractor> getExtractors() {
        return extractors;
    }

    public void setExtractors(@javax.annotation.Nonnull List<Extractor> extractors) {
        this.extractors = extractors;
    }

    public Transformer function(@javax.annotation.Nullable String function) {
        this.function = function;
        return this;
    }

    /**
     * Get function
     *
     * @return function
     */
    @javax.annotation.Nullable
    public String getFunction() {
        return function;
    }

    public void setFunction(@javax.annotation.Nullable String function) {
        this.function = function;
    }

    public Transformer schemaId(@javax.annotation.Nonnull Integer schemaId) {
        this.schemaId = schemaId;
        return this;
    }

    /**
     * Schema ID that the transform is registered against
     *
     * @return schemaId
     */
    @javax.annotation.Nonnull
    public Integer getSchemaId() {
        return schemaId;
    }

    public void setSchemaId(@javax.annotation.Nonnull Integer schemaId) {
        this.schemaId = schemaId;
    }

    public Transformer schemaUri(@javax.annotation.Nonnull String schemaUri) {
        this.schemaUri = schemaUri;
        return this;
    }

    /**
     * Schema Uri that the transform is registered against
     *
     * @return schemaUri
     */
    @javax.annotation.Nonnull
    public String getSchemaUri() {
        return schemaUri;
    }

    public void setSchemaUri(@javax.annotation.Nonnull String schemaUri) {
        this.schemaUri = schemaUri;
    }

    public Transformer schemaName(@javax.annotation.Nonnull String schemaName) {
        this.schemaName = schemaName;
        return this;
    }

    /**
     * Schema name that the transform is registered against
     *
     * @return schemaName
     */
    @javax.annotation.Nonnull
    public String getSchemaName() {
        return schemaName;
    }

    public void setSchemaName(@javax.annotation.Nonnull String schemaName) {
        this.schemaName = schemaName;
    }

    public Transformer access(@javax.annotation.Nonnull Access access) {
        this.access = access;
        return this;
    }

    /**
     * Access rights for the test. This defines the visibility of the Test in the UI
     *
     * @return access
     */
    @javax.annotation.Nonnull
    public Access getAccess() {
        return access;
    }

    public void setAccess(@javax.annotation.Nonnull Access access) {
        this.access = access;
    }

    public Transformer owner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Name of the team that owns the test. Users must belong to the team that owns a test to make modifications
     *
     * @return owner
     */
    @javax.annotation.Nonnull
    public String getOwner() {
        return owner;
    }

    public void setOwner(@javax.annotation.Nonnull String owner) {
        this.owner = owner;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transformer transformer = (Transformer) o;
        return Objects.equals(this.id, transformer.id) &&
            Objects.equals(this.name, transformer.name) &&
            Objects.equals(this.description, transformer.description) &&
            Objects.equals(this.targetSchemaUri, transformer.targetSchemaUri) &&
            Objects.equals(this.extractors, transformer.extractors) &&
            Objects.equals(this.function, transformer.function) &&
            Objects.equals(this.schemaId, transformer.schemaId) &&
            Objects.equals(this.schemaUri, transformer.schemaUri) &&
            Objects.equals(this.schemaName, transformer.schemaName) &&
            Objects.equals(this.access, transformer.access) &&
            Objects.equals(this.owner, transformer.owner);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, description, targetSchemaUri, extractors, function, schemaId, schemaUri, schemaName, access, owner);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Transformer {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    targetSchemaUri: ").append(toIndentedString(targetSchemaUri)).append("\n");
        sb.append("    extractors: ").append(toIndentedString(extractors)).append("\n");
        sb.append("    function: ").append(toIndentedString(function)).append("\n");
        sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
        sb.append("    schemaUri: ").append(toIndentedString(schemaUri)).append("\n");
        sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
        sb.append("    access: ").append(toIndentedString(access)).append("\n");
        sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("access");
        openapiFields.add("owner");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("extractors");
        openapiRequiredFields.add("schemaId");
        openapiRequiredFields.add("schemaUri");
        openapiRequiredFields.add("schemaName");
        openapiRequiredFields.add("access");
        openapiRequiredFields.add("owner");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Transformer
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Transformer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in Transformer is not found in the empty JSON string",
                    Transformer.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Transformer.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `Transformer` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Transformer.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                    String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("targetSchemaUri") != null && !jsonObj.get("targetSchemaUri").isJsonNull()) && !jsonObj.get("targetSchemaUri")
            .isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `targetSchemaUri` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("targetSchemaUri").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("extractors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extractors` to be an array in the JSON string but got `%s`",
                jsonObj.get("extractors").toString()));
        }

        JsonArray jsonArrayextractors = jsonObj.getAsJsonArray("extractors");
        // validate the required field `extractors` (array)
        for (int i = 0; i < jsonArrayextractors.size(); i++) {
            Extractor.validateJsonElement(jsonArrayextractors.get(i));
        }
        ;
        if ((jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) && !jsonObj.get("function").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("function").toString()));
        }
        if (!jsonObj.get("schemaUri").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `schemaUri` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("schemaUri").toString()));
        }
        if (!jsonObj.get("schemaName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("schemaName").toString()));
        }
        // validate the required field `access`
        Access.validateJsonElement(jsonObj.get("access"));
        if (!jsonObj.get("owner").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Transformer.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Transformer' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Transformer> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(Transformer.class));

            return (TypeAdapter<T>) new TypeAdapter<Transformer>() {
                @Override
                public void write(JsonWriter out, Transformer value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public Transformer read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of Transformer given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Transformer
     * @throws IOException if the JSON string is invalid with respect to Transformer
     */
    public static Transformer fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Transformer.class);
    }

    /**
     * Convert an instance of Transformer to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

