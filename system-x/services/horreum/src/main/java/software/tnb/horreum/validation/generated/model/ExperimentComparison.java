/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.tnb.horreum.validation.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import software.tnb.horreum.validation.generated.JSON;

/**
 * ExperimentComparison
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]", comments = "Generator version: 7.10.0")
public class ExperimentComparison {
  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  @javax.annotation.Nonnull
  private String model;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  @javax.annotation.Nonnull
  private String config;

  public static final String SERIALIZED_NAME_VARIABLE_ID = "variableId";
  @SerializedName(SERIALIZED_NAME_VARIABLE_ID)
  @javax.annotation.Nonnull
  private Integer variableId;

  public static final String SERIALIZED_NAME_VARIABLE_NAME = "variableName";
  @SerializedName(SERIALIZED_NAME_VARIABLE_NAME)
  @javax.annotation.Nullable
  private String variableName;

  public ExperimentComparison() {
  }

  public ExperimentComparison model(@javax.annotation.Nonnull String model) {
    this.model = model;
    return this;
  }

  /**
   * Name of comparison model
   * @return model
   */
  @javax.annotation.Nonnull
  public String getModel() {
    return model;
  }

  public void setModel(@javax.annotation.Nonnull String model) {
    this.model = model;
  }


  public ExperimentComparison config(@javax.annotation.Nonnull String config) {
    this.config = config;
    return this;
  }

  /**
   * Model JSON configuration
   * @return config
   */
  @javax.annotation.Nonnull
  public String getConfig() {
    return config;
  }

  public void setConfig(@javax.annotation.Nonnull String config) {
    this.config = config;
  }


  public ExperimentComparison variableId(@javax.annotation.Nonnull Integer variableId) {
    this.variableId = variableId;
    return this;
  }

  /**
   * Variable ID to run experiment against
   * @return variableId
   */
  @javax.annotation.Nonnull
  public Integer getVariableId() {
    return variableId;
  }

  public void setVariableId(@javax.annotation.Nonnull Integer variableId) {
    this.variableId = variableId;
  }


  public ExperimentComparison variableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
    return this;
  }

  /**
   * Variable Name to run experiment against
   * @return variableName
   */
  @javax.annotation.Nullable
  public String getVariableName() {
    return variableName;
  }

  public void setVariableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperimentComparison experimentComparison = (ExperimentComparison) o;
    return Objects.equals(this.model, experimentComparison.model) &&
        Objects.equals(this.config, experimentComparison.config) &&
        Objects.equals(this.variableId, experimentComparison.variableId) &&
        Objects.equals(this.variableName, experimentComparison.variableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, config, variableId, variableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperimentComparison {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    variableId: ").append(toIndentedString(variableId)).append("\n");
    sb.append("    variableName: ").append(toIndentedString(variableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("model");
    openapiFields.add("config");
    openapiFields.add("variableId");
    openapiFields.add("variableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("config");
    openapiRequiredFields.add("variableId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExperimentComparison
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExperimentComparison.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExperimentComparison is not found in the empty JSON string", ExperimentComparison.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExperimentComparison.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExperimentComparison` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExperimentComparison.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (!jsonObj.get("config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      if ((jsonObj.get("variableName") != null && !jsonObj.get("variableName").isJsonNull()) && !jsonObj.get("variableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variableName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExperimentComparison.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExperimentComparison' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExperimentComparison> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExperimentComparison.class));

       return (TypeAdapter<T>) new TypeAdapter<ExperimentComparison>() {
           @Override
           public void write(JsonWriter out, ExperimentComparison value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExperimentComparison read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExperimentComparison given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExperimentComparison
   * @throws IOException if the JSON string is invalid with respect to ExperimentComparison
   */
  public static ExperimentComparison fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExperimentComparison.class);
  }

  /**
   * Convert an instance of ExperimentComparison to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

