/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.tnb.horreum.validation.generated.model;

import software.tnb.horreum.validation.generated.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import jakarta.annotation.Generated;

/**
 * KeycloakConfig
 */
@Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]",
    comments = "Generator version: 7.10.0")
public class KeycloakConfig {
    public static final String SERIALIZED_NAME_REALM = "realm";
    @SerializedName(SERIALIZED_NAME_REALM)
    @javax.annotation.Nullable
    private String realm;

    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    @javax.annotation.Nullable
    private String url;

    public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
    @SerializedName(SERIALIZED_NAME_CLIENT_ID)
    @javax.annotation.Nullable
    private String clientId;

    public KeycloakConfig() {
    }

    public KeycloakConfig realm(@javax.annotation.Nullable String realm) {
        this.realm = realm;
        return this;
    }

    /**
     * Keycloak realm securing Horreum instance
     *
     * @return realm
     */
    @javax.annotation.Nullable
    public String getRealm() {
        return realm;
    }

    public void setRealm(@javax.annotation.Nullable String realm) {
        this.realm = realm;
    }

    public KeycloakConfig url(@javax.annotation.Nullable String url) {
        this.url = url;
        return this;
    }

    /**
     * URL of Keycloak instance securing Horreum
     *
     * @return url
     */
    @javax.annotation.Nullable
    public String getUrl() {
        return url;
    }

    public void setUrl(@javax.annotation.Nullable String url) {
        this.url = url;
    }

    public KeycloakConfig clientId(@javax.annotation.Nullable String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Keycloak client ID in Horreum realm for User Interface
     *
     * @return clientId
     */
    @javax.annotation.Nullable
    public String getClientId() {
        return clientId;
    }

    public void setClientId(@javax.annotation.Nullable String clientId) {
        this.clientId = clientId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KeycloakConfig keycloakConfig = (KeycloakConfig) o;
        return Objects.equals(this.realm, keycloakConfig.realm) &&
            Objects.equals(this.url, keycloakConfig.url) &&
            Objects.equals(this.clientId, keycloakConfig.clientId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(realm, url, clientId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KeycloakConfig {\n");
        sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("realm");
        openapiFields.add("url");
        openapiFields.add("clientId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to KeycloakConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!KeycloakConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in KeycloakConfig is not found in the empty JSON string",
                    KeycloakConfig.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!KeycloakConfig.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                    String.format("The field `%s` in the JSON string is not defined in the `KeycloakConfig` properties. JSON: %s", entry.getKey(),
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("realm") != null && !jsonObj.get("realm").isJsonNull()) && !jsonObj.get("realm").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `realm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realm").toString()));
        }
        if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
        }
        if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`",
                jsonObj.get("clientId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!KeycloakConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'KeycloakConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<KeycloakConfig> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(KeycloakConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<KeycloakConfig>() {
                @Override
                public void write(JsonWriter out, KeycloakConfig value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public KeycloakConfig read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }
            }.nullSafe();
        }
    }

    /**
     * Create an instance of KeycloakConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of KeycloakConfig
     * @throws IOException if the JSON string is invalid with respect to KeycloakConfig
     */
    public static KeycloakConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, KeycloakConfig.class);
    }

    /**
     * Convert an instance of KeycloakConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

