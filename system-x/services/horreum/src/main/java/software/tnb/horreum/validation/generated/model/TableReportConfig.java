/*
 * Horreum REST API
 * Horreum automated change anomaly detection. For more information, please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)
 *
 * The version of the OpenAPI document: 0.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.tnb.horreum.validation.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import software.tnb.horreum.validation.generated.JSON;

/**
 * Table Report Config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T20:53:38.158166061+01:00[Europe/Bratislava]", comments = "Generator version: 7.10.0")
public class TableReportConfig {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private Integer id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nonnull
  private String title;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  @javax.annotation.Nullable
  private Test test;

  public static final String SERIALIZED_NAME_FILTER_LABELS = "filterLabels";
  @SerializedName(SERIALIZED_NAME_FILTER_LABELS)
  @javax.annotation.Nullable
  private List<String> filterLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_FUNCTION = "filterFunction";
  @SerializedName(SERIALIZED_NAME_FILTER_FUNCTION)
  @javax.annotation.Nullable
  private String filterFunction;

  public static final String SERIALIZED_NAME_CATEGORY_LABELS = "categoryLabels";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LABELS)
  @javax.annotation.Nullable
  private List<String> categoryLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_FUNCTION = "categoryFunction";
  @SerializedName(SERIALIZED_NAME_CATEGORY_FUNCTION)
  @javax.annotation.Nullable
  private String categoryFunction;

  public static final String SERIALIZED_NAME_CATEGORY_FORMATTER = "categoryFormatter";
  @SerializedName(SERIALIZED_NAME_CATEGORY_FORMATTER)
  @javax.annotation.Nullable
  private String categoryFormatter;

  public static final String SERIALIZED_NAME_SERIES_LABELS = "seriesLabels";
  @SerializedName(SERIALIZED_NAME_SERIES_LABELS)
  @javax.annotation.Nonnull
  private List<String> seriesLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIES_FUNCTION = "seriesFunction";
  @SerializedName(SERIALIZED_NAME_SERIES_FUNCTION)
  @javax.annotation.Nullable
  private String seriesFunction;

  public static final String SERIALIZED_NAME_SERIES_FORMATTER = "seriesFormatter";
  @SerializedName(SERIALIZED_NAME_SERIES_FORMATTER)
  @javax.annotation.Nullable
  private String seriesFormatter;

  public static final String SERIALIZED_NAME_SCALE_LABELS = "scaleLabels";
  @SerializedName(SERIALIZED_NAME_SCALE_LABELS)
  @javax.annotation.Nullable
  private List<String> scaleLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALE_FUNCTION = "scaleFunction";
  @SerializedName(SERIALIZED_NAME_SCALE_FUNCTION)
  @javax.annotation.Nullable
  private String scaleFunction;

  public static final String SERIALIZED_NAME_SCALE_FORMATTER = "scaleFormatter";
  @SerializedName(SERIALIZED_NAME_SCALE_FORMATTER)
  @javax.annotation.Nullable
  private String scaleFormatter;

  public static final String SERIALIZED_NAME_SCALE_DESCRIPTION = "scaleDescription";
  @SerializedName(SERIALIZED_NAME_SCALE_DESCRIPTION)
  @javax.annotation.Nullable
  private String scaleDescription;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  @javax.annotation.Nonnull
  private List<TableReportConfigComponentsInner> components = new ArrayList<>();

  public TableReportConfig() {
  }

  public TableReportConfig id(@javax.annotation.Nonnull Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull Integer id) {
    this.id = id;
  }


  public TableReportConfig title(@javax.annotation.Nonnull String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nonnull String title) {
    this.title = title;
  }


  public TableReportConfig test(@javax.annotation.Nullable Test test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public Test getTest() {
    return test;
  }

  public void setTest(@javax.annotation.Nullable Test test) {
    this.test = test;
  }


  public TableReportConfig filterLabels(@javax.annotation.Nullable List<String> filterLabels) {
    this.filterLabels = filterLabels;
    return this;
  }

  public TableReportConfig addFilterLabelsItem(String filterLabelsItem) {
    if (this.filterLabels == null) {
      this.filterLabels = new ArrayList<>();
    }
    this.filterLabels.add(filterLabelsItem);
    return this;
  }

  /**
   * ArrayNode of filter labels
   * @return filterLabels
   */
  @javax.annotation.Nullable
  public List<String> getFilterLabels() {
    return filterLabels;
  }

  public void setFilterLabels(@javax.annotation.Nullable List<String> filterLabels) {
    this.filterLabels = filterLabels;
  }


  public TableReportConfig filterFunction(@javax.annotation.Nullable String filterFunction) {
    this.filterFunction = filterFunction;
    return this;
  }

  /**
   * Get filterFunction
   * @return filterFunction
   */
  @javax.annotation.Nullable
  public String getFilterFunction() {
    return filterFunction;
  }

  public void setFilterFunction(@javax.annotation.Nullable String filterFunction) {
    this.filterFunction = filterFunction;
  }


  public TableReportConfig categoryLabels(@javax.annotation.Nullable List<String> categoryLabels) {
    this.categoryLabels = categoryLabels;
    return this;
  }

  public TableReportConfig addCategoryLabelsItem(String categoryLabelsItem) {
    if (this.categoryLabels == null) {
      this.categoryLabels = new ArrayList<>();
    }
    this.categoryLabels.add(categoryLabelsItem);
    return this;
  }

  /**
   * ArrayNode of category labels
   * @return categoryLabels
   */
  @javax.annotation.Nullable
  public List<String> getCategoryLabels() {
    return categoryLabels;
  }

  public void setCategoryLabels(@javax.annotation.Nullable List<String> categoryLabels) {
    this.categoryLabels = categoryLabels;
  }


  public TableReportConfig categoryFunction(@javax.annotation.Nullable String categoryFunction) {
    this.categoryFunction = categoryFunction;
    return this;
  }

  /**
   * Get categoryFunction
   * @return categoryFunction
   */
  @javax.annotation.Nullable
  public String getCategoryFunction() {
    return categoryFunction;
  }

  public void setCategoryFunction(@javax.annotation.Nullable String categoryFunction) {
    this.categoryFunction = categoryFunction;
  }


  public TableReportConfig categoryFormatter(@javax.annotation.Nullable String categoryFormatter) {
    this.categoryFormatter = categoryFormatter;
    return this;
  }

  /**
   * Get categoryFormatter
   * @return categoryFormatter
   */
  @javax.annotation.Nullable
  public String getCategoryFormatter() {
    return categoryFormatter;
  }

  public void setCategoryFormatter(@javax.annotation.Nullable String categoryFormatter) {
    this.categoryFormatter = categoryFormatter;
  }


  public TableReportConfig seriesLabels(@javax.annotation.Nonnull List<String> seriesLabels) {
    this.seriesLabels = seriesLabels;
    return this;
  }

  public TableReportConfig addSeriesLabelsItem(String seriesLabelsItem) {
    if (this.seriesLabels == null) {
      this.seriesLabels = new ArrayList<>();
    }
    this.seriesLabels.add(seriesLabelsItem);
    return this;
  }

  /**
   * ArrayNode of series labels
   * @return seriesLabels
   */
  @javax.annotation.Nonnull
  public List<String> getSeriesLabels() {
    return seriesLabels;
  }

  public void setSeriesLabels(@javax.annotation.Nonnull List<String> seriesLabels) {
    this.seriesLabels = seriesLabels;
  }


  public TableReportConfig seriesFunction(@javax.annotation.Nullable String seriesFunction) {
    this.seriesFunction = seriesFunction;
    return this;
  }

  /**
   * Get seriesFunction
   * @return seriesFunction
   */
  @javax.annotation.Nullable
  public String getSeriesFunction() {
    return seriesFunction;
  }

  public void setSeriesFunction(@javax.annotation.Nullable String seriesFunction) {
    this.seriesFunction = seriesFunction;
  }


  public TableReportConfig seriesFormatter(@javax.annotation.Nullable String seriesFormatter) {
    this.seriesFormatter = seriesFormatter;
    return this;
  }

  /**
   * Get seriesFormatter
   * @return seriesFormatter
   */
  @javax.annotation.Nullable
  public String getSeriesFormatter() {
    return seriesFormatter;
  }

  public void setSeriesFormatter(@javax.annotation.Nullable String seriesFormatter) {
    this.seriesFormatter = seriesFormatter;
  }


  public TableReportConfig scaleLabels(@javax.annotation.Nullable List<String> scaleLabels) {
    this.scaleLabels = scaleLabels;
    return this;
  }

  public TableReportConfig addScaleLabelsItem(String scaleLabelsItem) {
    if (this.scaleLabels == null) {
      this.scaleLabels = new ArrayList<>();
    }
    this.scaleLabels.add(scaleLabelsItem);
    return this;
  }

  /**
   * ArrayNode of filter labels
   * @return scaleLabels
   */
  @javax.annotation.Nullable
  public List<String> getScaleLabels() {
    return scaleLabels;
  }

  public void setScaleLabels(@javax.annotation.Nullable List<String> scaleLabels) {
    this.scaleLabels = scaleLabels;
  }


  public TableReportConfig scaleFunction(@javax.annotation.Nullable String scaleFunction) {
    this.scaleFunction = scaleFunction;
    return this;
  }

  /**
   * Get scaleFunction
   * @return scaleFunction
   */
  @javax.annotation.Nullable
  public String getScaleFunction() {
    return scaleFunction;
  }

  public void setScaleFunction(@javax.annotation.Nullable String scaleFunction) {
    this.scaleFunction = scaleFunction;
  }


  public TableReportConfig scaleFormatter(@javax.annotation.Nullable String scaleFormatter) {
    this.scaleFormatter = scaleFormatter;
    return this;
  }

  /**
   * Get scaleFormatter
   * @return scaleFormatter
   */
  @javax.annotation.Nullable
  public String getScaleFormatter() {
    return scaleFormatter;
  }

  public void setScaleFormatter(@javax.annotation.Nullable String scaleFormatter) {
    this.scaleFormatter = scaleFormatter;
  }


  public TableReportConfig scaleDescription(@javax.annotation.Nullable String scaleDescription) {
    this.scaleDescription = scaleDescription;
    return this;
  }

  /**
   * Get scaleDescription
   * @return scaleDescription
   */
  @javax.annotation.Nullable
  public String getScaleDescription() {
    return scaleDescription;
  }

  public void setScaleDescription(@javax.annotation.Nullable String scaleDescription) {
    this.scaleDescription = scaleDescription;
  }


  public TableReportConfig components(@javax.annotation.Nonnull List<TableReportConfigComponentsInner> components) {
    this.components = components;
    return this;
  }

  public TableReportConfig addComponentsItem(TableReportConfigComponentsInner componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * List of ReportComponents
   * @return components
   */
  @javax.annotation.Nonnull
  public List<TableReportConfigComponentsInner> getComponents() {
    return components;
  }

  public void setComponents(@javax.annotation.Nonnull List<TableReportConfigComponentsInner> components) {
    this.components = components;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableReportConfig tableReportConfig = (TableReportConfig) o;
    return Objects.equals(this.id, tableReportConfig.id) &&
        Objects.equals(this.title, tableReportConfig.title) &&
        Objects.equals(this.test, tableReportConfig.test) &&
        Objects.equals(this.filterLabels, tableReportConfig.filterLabels) &&
        Objects.equals(this.filterFunction, tableReportConfig.filterFunction) &&
        Objects.equals(this.categoryLabels, tableReportConfig.categoryLabels) &&
        Objects.equals(this.categoryFunction, tableReportConfig.categoryFunction) &&
        Objects.equals(this.categoryFormatter, tableReportConfig.categoryFormatter) &&
        Objects.equals(this.seriesLabels, tableReportConfig.seriesLabels) &&
        Objects.equals(this.seriesFunction, tableReportConfig.seriesFunction) &&
        Objects.equals(this.seriesFormatter, tableReportConfig.seriesFormatter) &&
        Objects.equals(this.scaleLabels, tableReportConfig.scaleLabels) &&
        Objects.equals(this.scaleFunction, tableReportConfig.scaleFunction) &&
        Objects.equals(this.scaleFormatter, tableReportConfig.scaleFormatter) &&
        Objects.equals(this.scaleDescription, tableReportConfig.scaleDescription) &&
        Objects.equals(this.components, tableReportConfig.components);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, test, filterLabels, filterFunction, categoryLabels, categoryFunction, categoryFormatter, seriesLabels, seriesFunction, seriesFormatter, scaleLabels, scaleFunction, scaleFormatter, scaleDescription, components);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableReportConfig {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    filterLabels: ").append(toIndentedString(filterLabels)).append("\n");
    sb.append("    filterFunction: ").append(toIndentedString(filterFunction)).append("\n");
    sb.append("    categoryLabels: ").append(toIndentedString(categoryLabels)).append("\n");
    sb.append("    categoryFunction: ").append(toIndentedString(categoryFunction)).append("\n");
    sb.append("    categoryFormatter: ").append(toIndentedString(categoryFormatter)).append("\n");
    sb.append("    seriesLabels: ").append(toIndentedString(seriesLabels)).append("\n");
    sb.append("    seriesFunction: ").append(toIndentedString(seriesFunction)).append("\n");
    sb.append("    seriesFormatter: ").append(toIndentedString(seriesFormatter)).append("\n");
    sb.append("    scaleLabels: ").append(toIndentedString(scaleLabels)).append("\n");
    sb.append("    scaleFunction: ").append(toIndentedString(scaleFunction)).append("\n");
    sb.append("    scaleFormatter: ").append(toIndentedString(scaleFormatter)).append("\n");
    sb.append("    scaleDescription: ").append(toIndentedString(scaleDescription)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("test");
    openapiFields.add("filterLabels");
    openapiFields.add("filterFunction");
    openapiFields.add("categoryLabels");
    openapiFields.add("categoryFunction");
    openapiFields.add("categoryFormatter");
    openapiFields.add("seriesLabels");
    openapiFields.add("seriesFunction");
    openapiFields.add("seriesFormatter");
    openapiFields.add("scaleLabels");
    openapiFields.add("scaleFunction");
    openapiFields.add("scaleFormatter");
    openapiFields.add("scaleDescription");
    openapiFields.add("components");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("seriesLabels");
    openapiRequiredFields.add("components");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableReportConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableReportConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableReportConfig is not found in the empty JSON string", TableReportConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableReportConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableReportConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TableReportConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `test`
      if (jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) {
        Test.validateJsonElement(jsonObj.get("test"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filterLabels") != null && !jsonObj.get("filterLabels").isJsonNull() && !jsonObj.get("filterLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterLabels` to be an array in the JSON string but got `%s`", jsonObj.get("filterLabels").toString()));
      }
      if ((jsonObj.get("filterFunction") != null && !jsonObj.get("filterFunction").isJsonNull()) && !jsonObj.get("filterFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterFunction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryLabels") != null && !jsonObj.get("categoryLabels").isJsonNull() && !jsonObj.get("categoryLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryLabels` to be an array in the JSON string but got `%s`", jsonObj.get("categoryLabels").toString()));
      }
      if ((jsonObj.get("categoryFunction") != null && !jsonObj.get("categoryFunction").isJsonNull()) && !jsonObj.get("categoryFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryFunction").toString()));
      }
      if ((jsonObj.get("categoryFormatter") != null && !jsonObj.get("categoryFormatter").isJsonNull()) && !jsonObj.get("categoryFormatter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryFormatter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryFormatter").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("seriesLabels") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("seriesLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesLabels` to be an array in the JSON string but got `%s`", jsonObj.get("seriesLabels").toString()));
      }
      if ((jsonObj.get("seriesFunction") != null && !jsonObj.get("seriesFunction").isJsonNull()) && !jsonObj.get("seriesFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesFunction").toString()));
      }
      if ((jsonObj.get("seriesFormatter") != null && !jsonObj.get("seriesFormatter").isJsonNull()) && !jsonObj.get("seriesFormatter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesFormatter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesFormatter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scaleLabels") != null && !jsonObj.get("scaleLabels").isJsonNull() && !jsonObj.get("scaleLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleLabels` to be an array in the JSON string but got `%s`", jsonObj.get("scaleLabels").toString()));
      }
      if ((jsonObj.get("scaleFunction") != null && !jsonObj.get("scaleFunction").isJsonNull()) && !jsonObj.get("scaleFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleFunction").toString()));
      }
      if ((jsonObj.get("scaleFormatter") != null && !jsonObj.get("scaleFormatter").isJsonNull()) && !jsonObj.get("scaleFormatter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleFormatter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleFormatter").toString()));
      }
      if ((jsonObj.get("scaleDescription") != null && !jsonObj.get("scaleDescription").isJsonNull()) && !jsonObj.get("scaleDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleDescription").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }

      JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
      // validate the required field `components` (array)
      for (int i = 0; i < jsonArraycomponents.size(); i++) {
        TableReportConfigComponentsInner.validateJsonElement(jsonArraycomponents.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableReportConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableReportConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableReportConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableReportConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TableReportConfig>() {
           @Override
           public void write(JsonWriter out, TableReportConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableReportConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableReportConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableReportConfig
   * @throws IOException if the JSON string is invalid with respect to TableReportConfig
   */
  public static TableReportConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableReportConfig.class);
  }

  /**
   * Convert an instance of TableReportConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

